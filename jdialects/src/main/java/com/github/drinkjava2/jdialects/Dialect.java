/*
 * jDialects, a tiny SQL dialect tool 
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
 * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
 */
package com.github.drinkjava2.jdialects;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import com.github.drinkjava2.hibernate.RowSelection;
import com.github.drinkjava2.hibernate.SQLServer2005LimitHandler;
import com.github.drinkjava2.hibernate.SQLServer2012LimitHandler;
import com.github.drinkjava2.hibernate.StringHelper;

/**
 * jDialects is a small Java tool collect all database's dialects (now is 75
 * dialects), usually used for build pagination SQL. <br/>
 * 
 * jDialects is built for jSqlBox project, but it can be used any where which
 * based on SQL and need support multiple database dialects.
 * 
 * jDialects is developed on JAVA8 but be released on JDK1.6 to support more
 * older Java developing environments.
 * 
 * Note: For developer, do not modify source code of this file because most
 * source codes are generated by source code generator, detail see
 * test.codegenerator package
 * 
 * @author Yong Zhu
 * @version 1.0.0
 * @since 1.0.0
 * 
 */
public enum Dialect {

	AccessDialect, //
	Cache71Dialect, //
	CUBRIDDialect, //
	DataDirectOracle9Dialect, //
	DB2Dialect, //
	DB2390Dialect, //
	DB2400Dialect, //
	@Deprecated
	DerbyDialect, // Use other Derby version instead
	DerbyTenFiveDialect, //
	DerbyTenSevenDialect, //
	DerbyTenSixDialect, //
	FirebirdDialect, //
	FrontBaseDialect, //
	H2Dialect, //
	HANAColumnStoreDialect, //
	HANARowStoreDialect, //
	HSQLDialect, //
	InformixDialect, //
	Informix10Dialect, //
	IngresDialect, //
	Ingres10Dialect, //
	Ingres9Dialect, //
	InterbaseDialect, //
	JDataStoreDialect, //
	MariaDBDialect, //
	MariaDB53Dialect, //
	MckoiDialect, //
	MimerSQLDialect, //
	MySQLDialect, //
	MySQL5Dialect, //
	MySQL55Dialect, //
	MySQL57Dialect, //
	MySQL57InnoDBDialect, //
	MySQL5InnoDBDialect, //
	MySQLInnoDBDialect, //
	MySQLMyISAMDialect, //
	@Deprecated // use Oracle8iDialect instead
	OracleDialect, //
	Oracle8iDialect, //
	@Deprecated // Use Oracle9i instead
	Oracle9Dialect, //
	Oracle9iDialect, //
	Oracle10gDialect, //
	Oracle12cDialect, //
	PointbaseDialect, //
	PostgresPlusDialect, //
	PostgreSQLDialect, //
	PostgreSQL81Dialect, //
	PostgreSQL82Dialect, //
	PostgreSQL9Dialect, //
	PostgreSQL91Dialect, //
	PostgreSQL92Dialect, //
	PostgreSQL93Dialect, //
	PostgreSQL94Dialect, //
	PostgreSQL95Dialect, //
	ProgressDialect, //
	RDMSOS2200Dialect, //
	SAPDBDialect, //
	SQLiteDialect, //
	SQLServerDialect, //
	SQLServer2005Dialect, //
	SQLServer2008Dialect, //
	SQLServer2012Dialect, //
	SybaseDialect, //
	Sybase11Dialect, //
	SybaseAnywhereDialect, //
	SybaseASE15Dialect, //
	SybaseASE157Dialect, //
	TeradataDialect, //
	Teradata14Dialect, //
	TimesTen;//

	private static final String SKIP_ROWS = "$SKIP_ROWS";
	private static final String PAGESIZE = "$PAGESIZE";
	private static final String TOTAL_ROWS = "$TOTAL_ROWS";
	private static final String SKIP_ROWS_PLUS1 = "$SKIP_ROWS_PLUS1";
	private static final String TOTAL_ROWS_PLUS1 = "$TOTAL_ROWS_PLUS1";
	private static final String DISTINCT_TAG = "($DISTINCT)";
	public static final String NOT_SUPPORT = "NOT_SUPPORT";

	private String paginSQLTemplate;
	private String paginFirstOnlyTemplate;
	private Map<String, String> typeMappings = new HashMap<>();

	private Dialect() {
		initializePaginSqlTemplate();
		initializePaginFirstOnlySqlTemplate();
		initializeTypeMappings();
	}

	// Initialize paginSQLTemplate
	private void initializeTypeMappings() {// NOSONAR
		switch (this.toString()) { // NOSONAR
		case "SQLiteDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "blob");// NOSONAR
			typeMappings.put("$BIT", "boolean");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "decimal");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float($p)");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "blob");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longvarchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "blob");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "AccessDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "integer");// NOSONAR
			typeMappings.put("$BINARY", "N/A|255<binary");// NOSONAR
			typeMappings.put("$BIT", "boolean");// NOSONAR
			typeMappings.put("$BLOB", "ole");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$CLOB", "longvarchar");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "java_object");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longvarbinary");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longvarchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "currency");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "timestamp");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "bit varying($l)|255<varbinary");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "ExcelDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary");// NOSONAR
			typeMappings.put("$BIT", "boolean");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "longvarchar");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longvarbinary");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longvarchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "numeric(5,0)");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "numeric(3,0)");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "TextDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary");// NOSONAR
			typeMappings.put("$BIT", "boolean");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "decimal($p,$s)");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "java_object");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longvarbinary");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longvarchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "numeric(5,0)");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "numeric(3,0)");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "ParadoxDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "integer");// NOSONAR
			typeMappings.put("$BINARY", "binary");// NOSONAR
			typeMappings.put("$BIT", "boolean");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "java_object");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longvarbinary");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longvarchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "ole");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "CobolDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary");// NOSONAR
			typeMappings.put("$BIT", "boolean");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "decimal($p,$s)");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "java_object");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longvarbinary");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longvarchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "XMLDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary");// NOSONAR
			typeMappings.put("$BIT", "boolean");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "longvarchar");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longvarbinary");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longvarchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "numeric(5,0)");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "numeric(3,0)");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "DbfDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "integer");// NOSONAR
			typeMappings.put("$BINARY", "N/A|255<binary");// NOSONAR
			typeMappings.put("$BIT", "boolean");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "java_object");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longvarbinary");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longvarchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "blob");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "bit varying($l)|255<varbinary");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "Cache71Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "BigInt");// NOSONAR
			typeMappings.put("$BINARY", "varbinary($1)");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "longvarbinary");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "longvarchar");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "decimal");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longvarbinary");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longvarchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "longvarbinary");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "CUBRIDDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "N/A");// NOSONAR
			typeMappings.put("$BIT", "bit(8)");// NOSONAR
			typeMappings.put("$BLOB", "bit varying(65535)");// NOSONAR
			typeMappings.put("$BOOLEAN", "bit(8)");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "string");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "decimal");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "int");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "double");// NOSONAR
			typeMappings.put("$SMALLINT", "short");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "short");// NOSONAR
			typeMappings.put("$VARBINARY", "bit varying($l)|2000<bit varying($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "string|255<varchar($l)|2000<varchar($l)");// NOSONAR
		}
			break;
		case "DataDirectOracle9Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "number(19,0)");// NOSONAR
			typeMappings.put("$BINARY", "N/A");// NOSONAR
			typeMappings.put("$BIT", "number(1,0)");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1 char)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "number($p,$s)");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "number(10,0)");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "number($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "number(5,0)");// NOSONAR
			typeMappings.put("$TIME", "date");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "number(3,0)");// NOSONAR
			typeMappings.put("$VARBINARY", "long raw|2000<raw($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "long|4000<varchar2($l char)");// NOSONAR
		}
			break;
		case "DB2Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "varchar($l) for bit data|254<char($l) for bit data");// NOSONAR
			typeMappings.put("$BIT", "smallint");// NOSONAR
			typeMappings.put("$BLOB", "blob($l)");// NOSONAR
			typeMappings.put("$BOOLEAN", "smallint");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob($l)");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "long varchar for bit data");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "long varchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "varchar($l) for bit data");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "DB2390Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "varchar($l) for bit data|254<char($l) for bit data");// NOSONAR
			typeMappings.put("$BIT", "smallint");// NOSONAR
			typeMappings.put("$BLOB", "blob($l)");// NOSONAR
			typeMappings.put("$BOOLEAN", "smallint");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob($l)");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "long varchar for bit data");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "long varchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "varchar($l) for bit data");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "DB2400Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "varchar($l) for bit data|254<char($l) for bit data");// NOSONAR
			typeMappings.put("$BIT", "smallint");// NOSONAR
			typeMappings.put("$BLOB", "blob($l)");// NOSONAR
			typeMappings.put("$BOOLEAN", "smallint");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob($l)");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "long varchar for bit data");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "long varchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "varchar($l) for bit data");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "DerbyDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "varchar($l) for bit data|254<char($l) for bit data");// NOSONAR
			typeMappings.put("$BIT", "smallint");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "smallint");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob($l)");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "long varchar for bit data");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "long varchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "varchar($l) for bit data");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "DerbyTenFiveDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "varchar($l) for bit data|254<char($l) for bit data");// NOSONAR
			typeMappings.put("$BIT", "smallint");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "smallint");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob($l)");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "long varchar for bit data");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "long varchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "varchar($l) for bit data");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "DerbyTenSevenDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "varchar($l) for bit data|254<char($l) for bit data");// NOSONAR
			typeMappings.put("$BIT", "smallint");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob($l)");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "long varchar for bit data");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "long varchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "varchar($l) for bit data");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "DerbyTenSixDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "varchar($l) for bit data|254<char($l) for bit data");// NOSONAR
			typeMappings.put("$BIT", "smallint");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "smallint");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob($l)");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "long varchar for bit data");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "long varchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "varchar($l) for bit data");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "FirebirdDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "numeric(18,0)");// NOSONAR
			typeMappings.put("$BINARY", "N/A");// NOSONAR
			typeMappings.put("$BIT", "smallint");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "smallint");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "blob sub_type 1");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "blob");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "FrontBaseDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "longint");// NOSONAR
			typeMappings.put("$BINARY", "N/A");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "H2Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary");// NOSONAR
			typeMappings.put("$BIT", "boolean");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char($l)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "decimal($p,$s)");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longvarbinary");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar(2147483647)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "binary($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "HANAColumnStoreDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "blob|5000<varbinary($l)");// NOSONAR
			typeMappings.put("$BIT", "smallint");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "tinyint");// NOSONAR
			typeMappings.put("$CHAR", "varchar(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "decimal($p, $s)");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float($p)");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "blob|5000<varbinary($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "clob|5000<varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nclob|5000<nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "blob|5000<varbinary($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "clob|5000<varchar($l)");// NOSONAR
		}
			break;
		case "HANARowStoreDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "blob|5000<varbinary($l)");// NOSONAR
			typeMappings.put("$BIT", "smallint");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "tinyint");// NOSONAR
			typeMappings.put("$CHAR", "varchar(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "decimal($p, $s)");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float($p)");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "blob|5000<varbinary($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "clob|5000<varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nclob|5000<nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "blob|5000<varbinary($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "clob|5000<varchar($l)");// NOSONAR
		}
			break;
		case "HSQLDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "longvarbinary");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char($l)");// NOSONAR
			typeMappings.put("$CLOB", "longvarchar");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "decimal($p,$s)");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longvarbinary");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longvarchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "clob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "InformixDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "int8");// NOSONAR
			typeMappings.put("$BINARY", "byte");// NOSONAR
			typeMappings.put("$BIT", "smallint");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char($l)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "decimal");// NOSONAR
			typeMappings.put("$DOUBLE", "float");// NOSONAR
			typeMappings.put("$FLOAT", "smallfloat");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "blob");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "clob");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "smallfloat");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "datetime hour to second");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime year to fraction(5)");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "byte");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)|255<varchar($l)|32739<lvarchar($l)");// NOSONAR
		}
			break;
		case "Informix10Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "int8");// NOSONAR
			typeMappings.put("$BINARY", "byte");// NOSONAR
			typeMappings.put("$BIT", "smallint");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char($l)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "decimal");// NOSONAR
			typeMappings.put("$DOUBLE", "float");// NOSONAR
			typeMappings.put("$FLOAT", "smallfloat");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "blob");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "clob");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "smallfloat");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "datetime hour to second");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime year to fraction(5)");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "byte");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)|255<varchar($l)|32739<lvarchar($l)");// NOSONAR
		}
			break;
		case "IngresDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "long byte|32000<byte($l)");// NOSONAR
			typeMappings.put("$BIT", "tinyint");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char($l)|32000<char($l)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "decimal($p, $s)");// NOSONAR
			typeMappings.put("$DOUBLE", "float");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "long byte");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "long varchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal($p, $s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time with time zone");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp with time zone");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "long byte|32000<varbyte($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "long varchar|32000<varchar($l)");// NOSONAR
		}
			break;
		case "Ingres10Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "long byte|32000<byte($l)");// NOSONAR
			typeMappings.put("$BIT", "boolean");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char($l)|32000<char($l)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "ansidate");// NOSONAR
			typeMappings.put("$DECIMAL", "decimal($p, $s)");// NOSONAR
			typeMappings.put("$DOUBLE", "float");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "long byte");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "long varchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal($p, $s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time with time zone");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp(9) with time zone");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "long byte|32000<varbyte($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "long varchar|32000<varchar($l)");// NOSONAR
		}
			break;
		case "Ingres9Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "long byte|32000<byte($l)");// NOSONAR
			typeMappings.put("$BIT", "tinyint");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char($l)|32000<char($l)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "ansidate");// NOSONAR
			typeMappings.put("$DECIMAL", "decimal($p, $s)");// NOSONAR
			typeMappings.put("$DOUBLE", "float");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "long byte");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "long varchar");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal($p, $s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time with time zone");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp(9) with time zone");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "long byte|32000<varbyte($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "long varchar|32000<varchar($l)");// NOSONAR
		}
			break;
		case "InterbaseDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "numeric(18,0)");// NOSONAR
			typeMappings.put("$BINARY", "N/A");// NOSONAR
			typeMappings.put("$BIT", "smallint");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "smallint");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "blob sub_type 1");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "blob");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "JDataStoreDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "N/A");// NOSONAR
			typeMappings.put("$BIT", "tinyint");// NOSONAR
			typeMappings.put("$BLOB", "varbinary");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "varchar");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p, $s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "MariaDBDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "longblob");// NOSONAR
			typeMappings.put("$BOOLEAN", "bit");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "longtext");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longblob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longtext");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "longtext");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "longblob|255<tinyblob|65535<blob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$VARCHAR", "longtext|65535<varchar($l)");// NOSONAR
		}
			break;
		case "MariaDB53Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "longblob");// NOSONAR
			typeMappings.put("$BOOLEAN", "bit");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "longtext");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longblob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longtext");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "longtext");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime(6)");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "longblob|255<tinyblob|65535<blob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$VARCHAR", "longtext|65535<varchar($l)");// NOSONAR
		}
			break;
		case "MckoiDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "N/A");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "MimerSQLDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "BIGINT");// NOSONAR
			typeMappings.put("$BINARY", "BLOB($1)|2000<BINARY");// NOSONAR
			typeMappings.put("$BIT", "ODBC.BIT");// NOSONAR
			typeMappings.put("$BLOB", "BLOB($l)");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "NCHAR(1)");// NOSONAR
			typeMappings.put("$CLOB", "NCLOB($l)");// NOSONAR
			typeMappings.put("$DATE", "DATE");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "DOUBLE PRECISION");// NOSONAR
			typeMappings.put("$FLOAT", "FLOAT");// NOSONAR
			typeMappings.put("$INTEGER", "INTEGER");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "BLOB($1)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "CLOB($1)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "NUMERIC(19, $l)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "SMALLINT");// NOSONAR
			typeMappings.put("$TIME", "TIME");// NOSONAR
			typeMappings.put("$TIMESTAMP", "TIMESTAMP");// NOSONAR
			typeMappings.put("$TINYINT", "ODBC.TINYINT");// NOSONAR
			typeMappings.put("$VARBINARY", "BLOB($1)|2000<BINARY VARYING($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "NCLOB($l)|2000<NATIONAL CHARACTER VARYING($l)");// NOSONAR
		}
			break;
		case "MySQLDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "longblob");// NOSONAR
			typeMappings.put("$BOOLEAN", "bit");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "longtext");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longblob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longtext");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "longtext");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "longblob|255<tinyblob|65535<blob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$VARCHAR", "longtext|255<varchar($l)");// NOSONAR
		}
			break;
		case "MySQL5Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "longblob");// NOSONAR
			typeMappings.put("$BOOLEAN", "bit");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "longtext");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longblob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longtext");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "longtext");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "longblob|255<tinyblob|65535<blob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$VARCHAR", "longtext|65535<varchar($l)");// NOSONAR
		}
			break;
		case "MySQL55Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "longblob");// NOSONAR
			typeMappings.put("$BOOLEAN", "bit");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "longtext");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longblob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longtext");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "longtext");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "longblob|255<tinyblob|65535<blob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$VARCHAR", "longtext|65535<varchar($l)");// NOSONAR
		}
			break;
		case "MySQL57Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "longblob");// NOSONAR
			typeMappings.put("$BOOLEAN", "bit");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "longtext");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "json");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longblob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longtext");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "longtext");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime(6)");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "longblob|255<tinyblob|65535<blob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$VARCHAR", "longtext|65535<varchar($l)");// NOSONAR
		}
			break;
		case "MySQL57InnoDBDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "longblob");// NOSONAR
			typeMappings.put("$BOOLEAN", "bit");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "longtext");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "json");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longblob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longtext");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "longtext");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime(6)");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "longblob|255<tinyblob|65535<blob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$VARCHAR", "longtext|65535<varchar($l)");// NOSONAR
			typeMappings.put("$ENGINE", "engine=innoDB");// NOSONAR
		}
			break;
		case "MySQL5InnoDBDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "longblob");// NOSONAR
			typeMappings.put("$BOOLEAN", "bit");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "longtext");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longblob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longtext");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "longtext");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "longblob|255<tinyblob|65535<blob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$VARCHAR", "longtext|65535<varchar($l)");// NOSONAR
			typeMappings.put("$ENGINE", "engine=innoDB");// NOSONAR
		}
			break;
		case "MySQLInnoDBDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "longblob");// NOSONAR
			typeMappings.put("$BOOLEAN", "bit");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "longtext");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longblob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longtext");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "longtext");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "longblob|255<tinyblob|65535<blob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$VARCHAR", "longtext|255<varchar($l)");// NOSONAR
			typeMappings.put("$ENGINE", "engine=innoDB");// NOSONAR
		}
			break;
		case "MySQLMyISAMDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "longblob");// NOSONAR
			typeMappings.put("$BOOLEAN", "bit");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "longtext");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "longblob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "longtext");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "longtext");// NOSONAR
			typeMappings.put("$NUMERIC", "decimal($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "longblob|255<tinyblob|65535<blob|16777215<mediumblob");// NOSONAR
			typeMappings.put("$VARCHAR", "longtext|255<varchar($l)");// NOSONAR
			typeMappings.put("$ENGINE", "engine=MyISAM");// NOSONAR
		}
			break;
		case "OracleDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "number(19,0)");// NOSONAR
			typeMappings.put("$BINARY", "N/A");// NOSONAR
			typeMappings.put("$BIT", "number(1,0)");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "number($p,$s)");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "number(10,0)");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "number($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "number(5,0)");// NOSONAR
			typeMappings.put("$TIME", "date");// NOSONAR
			typeMappings.put("$TIMESTAMP", "date");// NOSONAR
			typeMappings.put("$TINYINT", "number(3,0)");// NOSONAR
			typeMappings.put("$VARBINARY", "long raw|2000<raw($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "long|4000<varchar2($l)");// NOSONAR
		}
			break;
		case "Oracle10gDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "number(19,0)");// NOSONAR
			typeMappings.put("$BINARY", "long raw|2000<raw($l)");// NOSONAR
			typeMappings.put("$BIT", "number(1,0)");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "number(1,0)");// NOSONAR
			typeMappings.put("$CHAR", "char(1 char)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "number($p,$s)");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "number(10,0)");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar2($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "long raw");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "long");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "number($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar2($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "number(5,0)");// NOSONAR
			typeMappings.put("$TIME", "date");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "number(3,0)");// NOSONAR
			typeMappings.put("$VARBINARY", "long raw|2000<raw($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "long|4000<varchar2($l char)");// NOSONAR
		}
			break;
		case "Oracle12cDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "number(19,0)");// NOSONAR
			typeMappings.put("$BINARY", "long raw|2000<raw($l)");// NOSONAR
			typeMappings.put("$BIT", "number(1,0)");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "number(1,0)");// NOSONAR
			typeMappings.put("$CHAR", "char(1 char)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "number($p,$s)");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "number(10,0)");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar2($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "long raw");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "long");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "number($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar2($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "number(5,0)");// NOSONAR
			typeMappings.put("$TIME", "date");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "number(3,0)");// NOSONAR
			typeMappings.put("$VARBINARY", "long raw|2000<raw($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "long|4000<varchar2($l char)");// NOSONAR
		}
			break;
		case "Oracle8iDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "number(19,0)");// NOSONAR
			typeMappings.put("$BINARY", "long raw|2000<raw($l)");// NOSONAR
			typeMappings.put("$BIT", "number(1,0)");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "number(1,0)");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "number($p,$s)");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "number(10,0)");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "long raw");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "long");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "number($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "number(5,0)");// NOSONAR
			typeMappings.put("$TIME", "date");// NOSONAR
			typeMappings.put("$TIMESTAMP", "date");// NOSONAR
			typeMappings.put("$TINYINT", "number(3,0)");// NOSONAR
			typeMappings.put("$VARBINARY", "long raw|2000<raw($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "long|4000<varchar2($l)");// NOSONAR
		}
			break;
		case "Oracle9Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "number(19,0)");// NOSONAR
			typeMappings.put("$BINARY", "N/A");// NOSONAR
			typeMappings.put("$BIT", "number(1,0)");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1 char)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "number($p,$s)");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "number(10,0)");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "number($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "number(5,0)");// NOSONAR
			typeMappings.put("$TIME", "date");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "number(3,0)");// NOSONAR
			typeMappings.put("$VARBINARY", "long raw|2000<raw($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "long|4000<varchar2($l char)");// NOSONAR
		}
			break;
		case "Oracle9iDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "number(19,0)");// NOSONAR
			typeMappings.put("$BINARY", "long raw|2000<raw($l)");// NOSONAR
			typeMappings.put("$BIT", "number(1,0)");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "number(1,0)");// NOSONAR
			typeMappings.put("$CHAR", "char(1 char)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "number($p,$s)");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "number(10,0)");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar2($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "long raw");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "long");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "number($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar2($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "number(5,0)");// NOSONAR
			typeMappings.put("$TIME", "date");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "number(3,0)");// NOSONAR
			typeMappings.put("$VARBINARY", "long raw|2000<raw($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "long|4000<varchar2($l char)");// NOSONAR
		}
			break;
		case "PointbaseDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "N/A");// NOSONAR
			typeMappings.put("$BIT", "smallint");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "blob($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "PostgresPlusDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "int8");// NOSONAR
			typeMappings.put("$BINARY", "bytea");// NOSONAR
			typeMappings.put("$BIT", "bool");// NOSONAR
			typeMappings.put("$BLOB", "oid");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "float8");// NOSONAR
			typeMappings.put("$FLOAT", "float4");// NOSONAR
			typeMappings.put("$INTEGER", "int4");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bytea");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "text");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p, $s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "uuid");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "int2");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "int2");// NOSONAR
			typeMappings.put("$VARBINARY", "bytea");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "PostgreSQLDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "int8");// NOSONAR
			typeMappings.put("$BINARY", "bytea");// NOSONAR
			typeMappings.put("$BIT", "bool");// NOSONAR
			typeMappings.put("$BLOB", "oid");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "float8");// NOSONAR
			typeMappings.put("$FLOAT", "float4");// NOSONAR
			typeMappings.put("$INTEGER", "int4");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bytea");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "text");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p, $s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "uuid");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "int2");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "int2");// NOSONAR
			typeMappings.put("$VARBINARY", "bytea");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "PostgreSQL81Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "int8");// NOSONAR
			typeMappings.put("$BINARY", "bytea");// NOSONAR
			typeMappings.put("$BIT", "bool");// NOSONAR
			typeMappings.put("$BLOB", "oid");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "float8");// NOSONAR
			typeMappings.put("$FLOAT", "float4");// NOSONAR
			typeMappings.put("$INTEGER", "int4");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bytea");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "text");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p, $s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "uuid");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "int2");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "int2");// NOSONAR
			typeMappings.put("$VARBINARY", "bytea");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "PostgreSQL82Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "int8");// NOSONAR
			typeMappings.put("$BINARY", "bytea");// NOSONAR
			typeMappings.put("$BIT", "bool");// NOSONAR
			typeMappings.put("$BLOB", "oid");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "float8");// NOSONAR
			typeMappings.put("$FLOAT", "float4");// NOSONAR
			typeMappings.put("$INTEGER", "int4");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bytea");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "text");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p, $s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "uuid");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "int2");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "int2");// NOSONAR
			typeMappings.put("$VARBINARY", "bytea");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "PostgreSQL9Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "int8");// NOSONAR
			typeMappings.put("$BINARY", "bytea");// NOSONAR
			typeMappings.put("$BIT", "bool");// NOSONAR
			typeMappings.put("$BLOB", "oid");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "float8");// NOSONAR
			typeMappings.put("$FLOAT", "float4");// NOSONAR
			typeMappings.put("$INTEGER", "int4");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bytea");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "text");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p, $s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "uuid");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "int2");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "int2");// NOSONAR
			typeMappings.put("$VARBINARY", "bytea");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "PostgreSQL91Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "int8");// NOSONAR
			typeMappings.put("$BINARY", "bytea");// NOSONAR
			typeMappings.put("$BIT", "bool");// NOSONAR
			typeMappings.put("$BLOB", "oid");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "float8");// NOSONAR
			typeMappings.put("$FLOAT", "float4");// NOSONAR
			typeMappings.put("$INTEGER", "int4");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bytea");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "text");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p, $s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "uuid");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "int2");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "int2");// NOSONAR
			typeMappings.put("$VARBINARY", "bytea");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "PostgreSQL92Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "int8");// NOSONAR
			typeMappings.put("$BINARY", "bytea");// NOSONAR
			typeMappings.put("$BIT", "bool");// NOSONAR
			typeMappings.put("$BLOB", "oid");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "float8");// NOSONAR
			typeMappings.put("$FLOAT", "float4");// NOSONAR
			typeMappings.put("$INTEGER", "int4");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "json");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bytea");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "text");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p, $s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "uuid");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "int2");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "int2");// NOSONAR
			typeMappings.put("$VARBINARY", "bytea");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "PostgreSQL93Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "int8");// NOSONAR
			typeMappings.put("$BINARY", "bytea");// NOSONAR
			typeMappings.put("$BIT", "bool");// NOSONAR
			typeMappings.put("$BLOB", "oid");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "float8");// NOSONAR
			typeMappings.put("$FLOAT", "float4");// NOSONAR
			typeMappings.put("$INTEGER", "int4");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "json");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bytea");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "text");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p, $s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "uuid");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "int2");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "int2");// NOSONAR
			typeMappings.put("$VARBINARY", "bytea");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "PostgreSQL94Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "int8");// NOSONAR
			typeMappings.put("$BINARY", "bytea");// NOSONAR
			typeMappings.put("$BIT", "bool");// NOSONAR
			typeMappings.put("$BLOB", "oid");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "float8");// NOSONAR
			typeMappings.put("$FLOAT", "float4");// NOSONAR
			typeMappings.put("$INTEGER", "int4");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "json");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bytea");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "text");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p, $s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "uuid");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "int2");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "int2");// NOSONAR
			typeMappings.put("$VARBINARY", "bytea");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "PostgreSQL95Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "int8");// NOSONAR
			typeMappings.put("$BINARY", "bytea");// NOSONAR
			typeMappings.put("$BIT", "bool");// NOSONAR
			typeMappings.put("$BLOB", "oid");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "float8");// NOSONAR
			typeMappings.put("$FLOAT", "float4");// NOSONAR
			typeMappings.put("$INTEGER", "int4");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "json");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bytea");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "text");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p, $s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "uuid");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "int2");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "int2");// NOSONAR
			typeMappings.put("$VARBINARY", "bytea");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "ProgressDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "numeric");// NOSONAR
			typeMappings.put("$BINARY", "N/A");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "blob");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "character(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "real");// NOSONAR
			typeMappings.put("$INTEGER", "integer");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "tinyint");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "RDMSOS2200Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "NUMERIC(21,0)");// NOSONAR
			typeMappings.put("$BINARY", "N/A");// NOSONAR
			typeMappings.put("$BIT", "SMALLINT");// NOSONAR
			typeMappings.put("$BLOB", "BLOB($l)");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "CHARACTER(1)");// NOSONAR
			typeMappings.put("$CLOB", "clob");// NOSONAR
			typeMappings.put("$DATE", "DATE");// NOSONAR
			typeMappings.put("$DECIMAL", "NUMERIC(21,$l)");// NOSONAR
			typeMappings.put("$DOUBLE", "DOUBLE PRECISION");// NOSONAR
			typeMappings.put("$FLOAT", "FLOAT");// NOSONAR
			typeMappings.put("$INTEGER", "INTEGER");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "NUMERIC(21,$l)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "REAL");// NOSONAR
			typeMappings.put("$SMALLINT", "SMALLINT");// NOSONAR
			typeMappings.put("$TIME", "TIME");// NOSONAR
			typeMappings.put("$TIMESTAMP", "TIMESTAMP");// NOSONAR
			typeMappings.put("$TINYINT", "SMALLINT");// NOSONAR
			typeMappings.put("$VARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "CHARACTER($l)");// NOSONAR
		}
			break;
		case "SAPDBDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "fixed(19,0)");// NOSONAR
			typeMappings.put("$BINARY", "N/A");// NOSONAR
			typeMappings.put("$BIT", "boolean");// NOSONAR
			typeMappings.put("$BLOB", "long byte");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "long varchar");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "int");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "fixed($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "timestamp");// NOSONAR
			typeMappings.put("$TINYINT", "fixed(3,0)");// NOSONAR
			typeMappings.put("$VARBINARY", "long byte");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "SQLServerDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "numeric(19,0)");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "tinyint");// NOSONAR
			typeMappings.put("$BLOB", "image");// NOSONAR
			typeMappings.put("$BOOLEAN", "bit");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "datetime");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "int");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "image");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "text");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "datetime");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "image|8000<varbinary($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "SQLServer2005Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "varbinary(MAX)");// NOSONAR
			typeMappings.put("$BOOLEAN", "bit");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "varchar(MAX)");// NOSONAR
			typeMappings.put("$DATE", "datetime");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "int");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "varbinary(MAX)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar(MAX)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nvarchar(MAX)");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "datetime");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary(MAX)|8000<varbinary($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar(MAX)|8000<varchar($l)");// NOSONAR
		}
			break;
		case "SQLServer2008Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "varbinary(MAX)");// NOSONAR
			typeMappings.put("$BOOLEAN", "bit");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "varchar(MAX)");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "int");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "varbinary(MAX)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar(MAX)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nvarchar(MAX)");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar(MAX)|4000<nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime2");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary(MAX)|8000<varbinary($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar(MAX)|8000<varchar($l)");// NOSONAR
		}
			break;
		case "SQLServer2012Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "bit");// NOSONAR
			typeMappings.put("$BLOB", "varbinary(MAX)");// NOSONAR
			typeMappings.put("$BOOLEAN", "bit");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "varchar(MAX)");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "int");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "varbinary(MAX)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar(MAX)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nvarchar(MAX)");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar(MAX)|4000<nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime2");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary(MAX)|8000<varbinary($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar(MAX)|8000<varchar($l)");// NOSONAR
		}
			break;
		case "SybaseDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "numeric(19,0)");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "tinyint");// NOSONAR
			typeMappings.put("$BLOB", "image");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "datetime");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "int");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "datetime");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "Sybase11Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "numeric(19,0)");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "tinyint");// NOSONAR
			typeMappings.put("$BLOB", "image");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "datetime");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "int");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "datetime");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "SybaseAnywhereDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "numeric(19,0)");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "tinyint");// NOSONAR
			typeMappings.put("$BLOB", "image");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "datetime");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "int");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "datetime");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "SybaseASE15Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "tinyint");// NOSONAR
			typeMappings.put("$BLOB", "image");// NOSONAR
			typeMappings.put("$BOOLEAN", "tinyint");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "int");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "image");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "text");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "SybaseASE157Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "binary($l)");// NOSONAR
			typeMappings.put("$BIT", "tinyint");// NOSONAR
			typeMappings.put("$BLOB", "image");// NOSONAR
			typeMappings.put("$BOOLEAN", "tinyint");// NOSONAR
			typeMappings.put("$CHAR", "char(1)");// NOSONAR
			typeMappings.put("$CLOB", "text");// NOSONAR
			typeMappings.put("$DATE", "date");// NOSONAR
			typeMappings.put("$DECIMAL", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$DOUBLE", "double precision");// NOSONAR
			typeMappings.put("$FLOAT", "float");// NOSONAR
			typeMappings.put("$INTEGER", "int");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "image");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "text");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "numeric($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "smallint");// NOSONAR
			typeMappings.put("$TIME", "time");// NOSONAR
			typeMappings.put("$TIMESTAMP", "datetime");// NOSONAR
			typeMappings.put("$TINYINT", "smallint");// NOSONAR
			typeMappings.put("$VARBINARY", "varbinary($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "varchar($l)");// NOSONAR
		}
			break;
		case "TeradataDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "NUMERIC(18,0)");// NOSONAR
			typeMappings.put("$BINARY", "BYTEINT");// NOSONAR
			typeMappings.put("$BIT", "BYTEINT");// NOSONAR
			typeMappings.put("$BLOB", "BLOB");// NOSONAR
			typeMappings.put("$BOOLEAN", "BYTEINT");// NOSONAR
			typeMappings.put("$CHAR", "CHAR(1)");// NOSONAR
			typeMappings.put("$CLOB", "CLOB");// NOSONAR
			typeMappings.put("$DATE", "DATE");// NOSONAR
			typeMappings.put("$DECIMAL", "DECIMAL");// NOSONAR
			typeMappings.put("$DOUBLE", "DOUBLE PRECISION");// NOSONAR
			typeMappings.put("$FLOAT", "FLOAT");// NOSONAR
			typeMappings.put("$INTEGER", "INTEGER");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "LONG VARCHAR");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "NUMERIC($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "SMALLINT");// NOSONAR
			typeMappings.put("$TIME", "TIME");// NOSONAR
			typeMappings.put("$TIMESTAMP", "TIMESTAMP");// NOSONAR
			typeMappings.put("$TINYINT", "BYTEINT");// NOSONAR
			typeMappings.put("$VARBINARY", "VARBYTE($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "VARCHAR($l)");// NOSONAR
		}
			break;
		case "Teradata14Dialect": {// NOSONAR
			typeMappings.put("$BIGINT", "BIGINT");// NOSONAR
			typeMappings.put("$BINARY", "VARBYTE(100)");// NOSONAR
			typeMappings.put("$BIT", "BYTEINT");// NOSONAR
			typeMappings.put("$BLOB", "BLOB");// NOSONAR
			typeMappings.put("$BOOLEAN", "BYTEINT");// NOSONAR
			typeMappings.put("$CHAR", "CHAR(1)");// NOSONAR
			typeMappings.put("$CLOB", "CLOB");// NOSONAR
			typeMappings.put("$DATE", "DATE");// NOSONAR
			typeMappings.put("$DECIMAL", "DECIMAL");// NOSONAR
			typeMappings.put("$DOUBLE", "DOUBLE PRECISION");// NOSONAR
			typeMappings.put("$FLOAT", "FLOAT");// NOSONAR
			typeMappings.put("$INTEGER", "INTEGER");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "VARBYTE(32000)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "VARCHAR(32000)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "NUMERIC($p,$s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "SMALLINT");// NOSONAR
			typeMappings.put("$TIME", "TIME");// NOSONAR
			typeMappings.put("$TIMESTAMP", "TIMESTAMP");// NOSONAR
			typeMappings.put("$TINYINT", "BYTEINT");// NOSONAR
			typeMappings.put("$VARBINARY", "VARBYTE($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "VARCHAR($l)");// NOSONAR
		}
			break;
		case "TimesTenDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "BIGINT");// NOSONAR
			typeMappings.put("$BINARY", "N/A");// NOSONAR
			typeMappings.put("$BIT", "TINYINT");// NOSONAR
			typeMappings.put("$BLOB", "VARBINARY(4000000)");// NOSONAR
			typeMappings.put("$BOOLEAN", "boolean");// NOSONAR
			typeMappings.put("$CHAR", "CHAR(1)");// NOSONAR
			typeMappings.put("$CLOB", "VARCHAR(4000000)");// NOSONAR
			typeMappings.put("$DATE", "DATE");// NOSONAR
			typeMappings.put("$DECIMAL", "N/A");// NOSONAR
			typeMappings.put("$DOUBLE", "DOUBLE");// NOSONAR
			typeMappings.put("$FLOAT", "FLOAT");// NOSONAR
			typeMappings.put("$INTEGER", "INTEGER");// NOSONAR
			typeMappings.put("$JAVA_OBJECT", "N/A");// NOSONAR
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");// NOSONAR
			typeMappings.put("$LONGVARCHAR", "varchar($l)");// NOSONAR
			typeMappings.put("$NCHAR", "nchar($l)");// NOSONAR
			typeMappings.put("$NCLOB", "nclob");// NOSONAR
			typeMappings.put("$NUMERIC", "DECIMAL($p, $s)");// NOSONAR
			typeMappings.put("$NVARCHAR", "nvarchar($l)");// NOSONAR
			typeMappings.put("$OTHER", "N/A");// NOSONAR
			typeMappings.put("$REAL", "real");// NOSONAR
			typeMappings.put("$SMALLINT", "SMALLINT");// NOSONAR
			typeMappings.put("$TIME", "TIME");// NOSONAR
			typeMappings.put("$TIMESTAMP", "TIMESTAMP");// NOSONAR
			typeMappings.put("$TINYINT", "TINYINT");// NOSONAR
			typeMappings.put("$VARBINARY", "VARBINARY($l)");// NOSONAR
			typeMappings.put("$VARCHAR", "VARCHAR($l)");// NOSONAR
		}
			break;
		default:
		}
	}

	// ====================================================
	// ====================================================

	// Initialize paginSQLTemplate
	private void initializePaginSqlTemplate() {// NOSONAR
		switch (this.toString()) {// NOSONAR
		case "Cache71Dialect":
		case "DB2390Dialect":
		case "FrontBaseDialect":
		case "InformixDialect":
		case "IngresDialect":
		case "JDataStoreDialect":
		case "MckoiDialect":
		case "MimerSQLDialect":
		case "PointbaseDialect":
		case "ProgressDialect":
		case "RDMSOS2200Dialect":
		case "SAPDBDialect":
		case "SQLServerDialect":
		case "Sybase11Dialect":
		case "SybaseAnywhereDialect":
		case "SybaseASE157Dialect":
		case "SybaseASE15Dialect":
		case "SybaseDialect":
		case "Teradata14Dialect":
		case "TeradataDialect":
		case "TimesTenDialect":
			paginSQLTemplate = NOT_SUPPORT;
			break;
		case "H2Dialect":
		case "HANAColumnStoreDialect":
		case "HANARowStoreDialect":
		case "PostgresPlusDialect":
		case "PostgreSQL81Dialect":
		case "PostgreSQL82Dialect":
		case "PostgreSQL91Dialect":
		case "PostgreSQL92Dialect":
		case "PostgreSQL93Dialect":
		case "PostgreSQL94Dialect":
		case "PostgreSQL95Dialect":
		case "PostgreSQL9Dialect":
		case "PostgreSQLDialect":
		case "SQLiteDialect":
			paginSQLTemplate = "select $BODY limit $PAGESIZE offset $SKIP_ROWS";
			break;
		case "AccessDialect":
		case "CobolDialect":
		case "CUBRIDDialect":
		case "DbfDialect":
		case "ExcelDialect":
		case "MariaDB53Dialect":
		case "MariaDBDialect":
		case "MySQL55Dialect":
		case "MySQL57Dialect":
		case "MySQL57InnoDBDialect":
		case "MySQL5Dialect":
		case "MySQL5InnoDBDialect":
		case "MySQLDialect":
		case "MySQLInnoDBDialect":
		case "MySQLMyISAMDialect":
		case "ParadoxDialect":
		case "TextDialect":
		case "XMLDialect":
			paginSQLTemplate = "select $BODY limit $SKIP_ROWS, $PAGESIZE";
			break;
		case "Ingres10Dialect":
		case "Ingres9Dialect":
			paginSQLTemplate = "select $BODY offset $skip_rows fetch first $pagesize rows only";
			break;
		case "DerbyDialect":
		case "DerbyTenFiveDialect":
		case "DerbyTenSevenDialect":
		case "DerbyTenSixDialect":
			paginSQLTemplate = "select $BODY offset $skip_rows rows fetch next $pagesize rows only";
			break;
		case "Oracle12cDialect":
		case "SQLServer2012Dialect":
			paginSQLTemplate = "select $BODY offset $SKIP_ROWS rows fetch next $PAGESIZE rows only";
			break;
		case "InterbaseDialect":
			paginSQLTemplate = "select $BODY rows $SKIP_ROWS to $PAGESIZE";
			break;
		case "DB2400Dialect":
		case "DB2Dialect":
			paginSQLTemplate = "select * from ( select inner2_.*, rownumber() over(order by order of inner2_) as rownumber_ from ( select $BODY fetch first $total_rows rows only ) as inner2_ ) as inner1_ where rownumber_ > $skip_rows order by rownumber_";
			break;
		case "Oracle8iDialect":
		case "OracleDialect":
			paginSQLTemplate = "select * from ( select row_.*, rownum rownum_ from ( select $BODY ) row_ ) where rownum_ <= $TOTAL_ROWS and rownum_ > $SKIP_ROWS";
			break;
		case "DataDirectOracle9Dialect":
		case "Oracle10gDialect":
		case "Oracle9Dialect":
		case "Oracle9iDialect":
			paginSQLTemplate = "select * from ( select row_.*, rownum rownum_ from ( select $BODY ) row_ where rownum <= $TOTAL_ROWS) where rownum_ > $SKIP_ROWS";
			break;
		case "FirebirdDialect":
			paginSQLTemplate = "select first $PAGESIZE skip $SKIP_ROWS $BODY";
			break;
		case "HSQLDialect":
			paginSQLTemplate = "select limit $SKIP_ROWS $PAGESIZE $BODY";
			break;
		case "Informix10Dialect":
			paginSQLTemplate = "select SKIP $skip_rows first $pagesize $BODY";
			break;
		case "SQLServer2005Dialect":
		case "SQLServer2008Dialect":
			paginSQLTemplate = "WITH query AS (SELECT TMP_.*, ROW_NUMBER() OVER (ORDER BY CURRENT_TIMESTAMP) as ROW_NUM_ FROM ( select ($DISTINCT) TOP($TOTAL_ROWS) $BODY ) TMP_ ) SELECT $FIELDS_OR_ALIAS FROM query WHERE ROW_NUM_ >= $SKIP_ROWS_PLUS1 AND ROW_NUM_ < $TOTAL_ROWS_PLUS1";
			break;
		default:
			paginSQLTemplate = NOT_SUPPORT;
		}
	}

	// initialize paginFirstOnlySqlTemplate
	private void initializePaginFirstOnlySqlTemplate() {// NOSONAR
		switch (this.toString()) {// NOSONAR
		case "FrontBaseDialect":
		case "JDataStoreDialect":
		case "MckoiDialect":
		case "MimerSQLDialect":
		case "PointbaseDialect":
		case "ProgressDialect":
		case "SAPDBDialect":
		case "Sybase11Dialect":
		case "SybaseAnywhereDialect":
		case "SybaseASE157Dialect":
		case "SybaseASE15Dialect":
		case "SybaseDialect":
		case "Teradata14Dialect":
		case "TeradataDialect":
			paginFirstOnlyTemplate = NOT_SUPPORT;
			break;
		case "DB2390Dialect":
		case "DB2400Dialect":
		case "DB2Dialect":
		case "DerbyDialect":
		case "DerbyTenFiveDialect":
		case "DerbyTenSevenDialect":
		case "DerbyTenSixDialect":
		case "Ingres10Dialect":
		case "Ingres9Dialect":
			paginFirstOnlyTemplate = "select $BODY fetch first $pagesize rows only";
			break;
		case "Oracle12cDialect":
			paginFirstOnlyTemplate = "select $BODY fetch first $PAGESIZE rows only";
			break;
		case "RDMSOS2200Dialect":
			paginFirstOnlyTemplate = "select $BODY fetch first $pagesize rows only ";
			break;
		case "AccessDialect":
		case "CobolDialect":
		case "CUBRIDDialect":
		case "DbfDialect":
		case "ExcelDialect":
		case "H2Dialect":
		case "HANAColumnStoreDialect":
		case "HANARowStoreDialect":
		case "MariaDB53Dialect":
		case "MariaDBDialect":
		case "MySQL55Dialect":
		case "MySQL57Dialect":
		case "MySQL57InnoDBDialect":
		case "MySQL5Dialect":
		case "MySQL5InnoDBDialect":
		case "MySQLDialect":
		case "MySQLInnoDBDialect":
		case "MySQLMyISAMDialect":
		case "ParadoxDialect":
		case "PostgresPlusDialect":
		case "PostgreSQL81Dialect":
		case "PostgreSQL82Dialect":
		case "PostgreSQL91Dialect":
		case "PostgreSQL92Dialect":
		case "PostgreSQL93Dialect":
		case "PostgreSQL94Dialect":
		case "PostgreSQL95Dialect":
		case "PostgreSQL9Dialect":
		case "PostgreSQLDialect":
		case "SQLiteDialect":
		case "TextDialect":
		case "XMLDialect":
			paginFirstOnlyTemplate = "select $BODY limit $PAGESIZE";
			break;
		case "SQLServer2012Dialect":
			paginFirstOnlyTemplate = "select $BODY offset 0 rows fetch next $PAGESIZE rows only";
			break;
		case "InterbaseDialect":
			paginFirstOnlyTemplate = "select $BODY rows $PAGESIZE";
			break;
		case "Cache71Dialect":
			paginFirstOnlyTemplate = "select ($DISTINCT) top $PAGESIZE $BODY";
			break;
		case "SQLServerDialect":
			paginFirstOnlyTemplate = "select ($DISTINCT) top $pagesize $BODY";
			break;
		case "SQLServer2005Dialect":
		case "SQLServer2008Dialect":
			paginFirstOnlyTemplate = "select ($DISTINCT) TOP($PAGESIZE) $BODY";
			break;
		case "DataDirectOracle9Dialect":
		case "Oracle10gDialect":
		case "Oracle8iDialect":
		case "Oracle9Dialect":
		case "Oracle9iDialect":
		case "OracleDialect":
			paginFirstOnlyTemplate = "select * from ( select $BODY ) where rownum <= $PAGESIZE";
			break;
		case "FirebirdDialect":
			paginFirstOnlyTemplate = "select first $PAGESIZE $BODY";
			break;
		case "Informix10Dialect":
		case "InformixDialect":
		case "IngresDialect":
		case "TimesTenDialect":
			paginFirstOnlyTemplate = "select first $pagesize $BODY";
			break;
		case "HSQLDialect":
			paginFirstOnlyTemplate = "select top $PAGESIZE $BODY";
			break;
		default:
			paginFirstOnlyTemplate = NOT_SUPPORT;
		}
	}

	// ====================================================
	// ====================================================

	/**
	 * Guess dialect based on given JDBC connection instance, Note: this method
	 * does not close connection
	 * 
	 * @param jdbcConnection
	 * @return dialect or null if not found
	 */
	public static Dialect guessDialect(Connection jdbcConnection) {
		String databaseName;
		int majorVersion;
		int minorVersion;
		try {
			DatabaseMetaData meta = jdbcConnection.getMetaData();
			databaseName = meta.getDatabaseProductName();
			majorVersion = meta.getDatabaseMajorVersion();
			minorVersion = meta.getDatabaseMinorVersion();
		} catch (SQLException e) {
			return (Dialect) DialectException.throwEX(e, e.getMessage());
		}
		return Dialect.guessDialect(databaseName, majorVersion, minorVersion);
	}

	/**
	 * Guess Dialect by give databaseName, MajorVersion, majorVersion
	 * 
	 * @param databaseName
	 *            database name
	 * @param majorVersion
	 *            major version, Optional
	 * @param minorVersion
	 *            minor version, Optional
	 * @return dialect or null if not found
	 */
	public static Dialect guessDialect(String databaseName, Object... majorVersion_minorVersion) {// NOSONAR
		int majorVersion = 0;
		int minorVersion = 0;
		for (int i = 0; i < majorVersion_minorVersion.length; i++) {
			if (i == 0)
				majorVersion = (Integer) majorVersion_minorVersion[i];
			if (i == 1)
				minorVersion = (Integer) majorVersion_minorVersion[i];
		}
		if ("CUBRID".equalsIgnoreCase(databaseName))
			return CUBRIDDialect;
		if ("HSQL Database Engine".equals(databaseName))
			return HSQLDialect;
		if ("H2".equals(databaseName))
			return H2Dialect;
		if ("MySQL".equals(databaseName))
			if (majorVersion >= 5)
				return MySQL5Dialect;
			else
				return MySQLDialect;
		if ("PostgreSQL".equals(databaseName)) {
			if (majorVersion == 9) {
				if (minorVersion >= 4) {
					return PostgreSQL94Dialect;
				} else if (minorVersion >= 2) {
					return PostgreSQL92Dialect;
				}
				return PostgreSQL9Dialect;
			}
			if (majorVersion == 8 && minorVersion >= 2) {
				return PostgreSQL82Dialect;
			}
			return PostgreSQL81Dialect;
		}
		if ("EnterpriseDB".equals(databaseName))
			return PostgresPlusDialect;
		if ("Apache Derby".equals(databaseName)) {
			if (majorVersion > 10 || (majorVersion == 10 && minorVersion >= 7))
				return DerbyTenSevenDialect;
			else if (majorVersion == 10 && minorVersion == 6)
				return DerbyTenSixDialect;
			else if (majorVersion == 10 && minorVersion == 5)
				return DerbyTenFiveDialect;
			else
				return DerbyDialect;
		}
		if ("ingres".equalsIgnoreCase(databaseName)) {
			switch (majorVersion) {
			case 9:
				if (minorVersion > 2)
					return Ingres9Dialect;
				else
					return IngresDialect;
			case 10:
				return Ingres10Dialect;
			default:
			}
			return IngresDialect;
		}
		if (databaseName.startsWith("Microsoft SQL Server")) {
			switch (majorVersion) {
			case 8:
				return SQLServerDialect;
			case 9:
				return SQLServer2005Dialect;
			case 10:
				return SQLServer2008Dialect;
			case 11:
			case 12:
			case 13:
				return SQLServer2012Dialect;
			default:
				if (majorVersion < 8)
					return SQLServerDialect;
				else
					return SQLServer2012Dialect;
			}
		}
		if ("Sybase SQL Server".equals(databaseName) || "Adaptive Server Enterprise".equals(databaseName))
			return SybaseASE15Dialect;
		if (databaseName.startsWith("Adaptive Server Anywhere"))
			return SybaseAnywhereDialect;
		if ("Informix Dynamic Server".equals(databaseName))
			return InformixDialect;
		if ("DB2 UDB for AS/400".equals(databaseName))
			return DB2400Dialect;
		if (databaseName.startsWith("DB2/"))
			return DB2Dialect;
		if ("Oracle".equals(databaseName)) {
			switch (majorVersion) {
			case 12:
				return Oracle12cDialect;
			case 11:
			case 10:
				return Oracle10gDialect;
			case 9:
				return Oracle9iDialect;
			case 8:
				return Oracle8iDialect;
			default:
			}
			return Oracle8iDialect;
		}
		if ("HDB".equals(databaseName))
			return HANAColumnStoreDialect;
		if (databaseName.startsWith("Firebird"))
			return FirebirdDialect;
		if (StrUtils.containsIgnoreCase(databaseName, "sqlite"))
			return SQLiteDialect;
		return null;
	}

	/**
	 * This method transfer a universal DDL to database DDL, to compare
	 * universal DDL and native DDl, please open this file
	 * "all-dialects-list.csv" in Excel
	 * 
	 * <pre>
	 * for example, universal ddl::    
	 *     create table table1 (c1 $BIGINT, c2 $numeric(10,2))
	 *      
	 * for MySQL5InnoDBDialect be transferred to:  
	 *     create table table1 (c1 bigint, c2 decimal(10,2)) ENGINE=InnoDB
	 *      
	 * for PostgreSQL9Dialect be transferred to:      
	 *     create table table1 (c1 int8, numeric(10,2))
	 * 
	 * </pre>
	 */
	public String ddlTransfer(String universalDDL) {
		String realDDL = universalDDL;

		// Map<String, String> typeMappings = null;
		// for (Entry<String, String> entry : typeMappings.entrySet()) {
		// String key = entry.getKey();
		// String value = entry.getValue();
		//
		// //int i=realDDL.indexOf(ch)
		//
		// }

		return realDDL;
	}

	private static String aTopLimitSqlExample(String template) {
		String result = StrUtils.replace(template, "$SQL", "select * from users order by userid");
		result = StrUtils.replace(result, "$BODY", "* from users order by userid");
		result = StrUtils.replace(result, " " + DISTINCT_TAG, "");
		result = StrUtils.replace(result, SKIP_ROWS, "0");
		result = StrUtils.replace(result, PAGESIZE, "10");
		result = StrUtils.replace(result, TOTAL_ROWS, "10");
		return result;
	}

	/**
	 * SQL SERVER is complex, don't want re-invent wheel, copy Hibernate's
	 * source code in this project do the dirty job
	 */
	private static String processSQLServer(Dialect dialect, int pageNumber, int pageSize, String sql) {
		int skipRows = (pageNumber - 1) * pageSize;
		int totalRows = pageNumber * pageSize;

		RowSelection selection = new RowSelection(skipRows, totalRows);
		String result = null;
		switch (dialect) {
		case SQLServer2005Dialect:
		case SQLServer2008Dialect:
			result = new SQLServer2005LimitHandler().processSql(sql, selection);
			result = StringHelper.replaceOnce(result, " TOP(?) ", " TOP(" + totalRows + ") ");
			result = StringHelper.replace(result, "__hibernate_row_nr__", "_ROW_NUM_");
			result = StringHelper.replaceOnce(result, "_ROW_NUM_ >= ? AND _ROW_NUM_ < ?",
					"_ROW_NUM_ >= " + (skipRows + 1) + " AND _ROW_NUM_ < " + (totalRows + 1));
			break;
		case SQLServer2012Dialect:
			result = new SQLServer2012LimitHandler().processSql(sql, selection);
			result = StringHelper.replaceOnce(result, "offset ? rows fetch next ? rows only",
					"offset " + skipRows + " rows fetch next " + pageSize + " rows only");
			result = StringHelper.replaceOnce(result, "offset 0 rows fetch next ? rows only",
					"offset 0 rows fetch next " + pageSize + " rows only");
			break;
		default:
		}
		if (StrUtils.isEmpty(result))
			return (String) DialectException.throwEX("Unexpected error, please report this bug");
		return result;
	}

	/**
	 * Create a pagination SQL by given pageNumber, pageSize and SQL<br/>
	 * 
	 * @param pageNumber
	 *            started from 0
	 * @param pageSize
	 *            page size
	 * @param sql
	 *            the original sql
	 * @return the pagination SQL String
	 */

	public String paginate(int pageNumber, int pageSize, String sql) {
		switch (this) {
		case SQLServer2005Dialect:
		case SQLServer2008Dialect:
		case SQLServer2012Dialect:
			return processSQLServer(this, pageNumber, pageSize, sql);
		default:
		}

		if (!StrUtils.startsWithIgnoreCase(sql, "select "))
			return (String) DialectException.throwEX("SQL should be started with \"select \".");
		String body = sql.substring(7).trim();
		if (StrUtils.isEmpty(body))
			return (String) DialectException.throwEX("SQL body can not be null");

		if (Dialect.NOT_SUPPORT.equals(paginSQLTemplate) || Dialect.NOT_SUPPORT.equals(paginFirstOnlyTemplate)) {
			if (!Dialect.NOT_SUPPORT.equals(paginFirstOnlyTemplate))
				return (String) DialectException.throwEX("Dialect \"" + this
						+ "\" has no easy solution for physical pagination, but it support top limit SQL, an example: \""
						+ aTopLimitSqlExample(paginFirstOnlyTemplate) + "\"");
			else
				return (String) DialectException
						.throwEX("Dialect \"" + this + "\" does not support physical pagination");
		}

		int skipRows = (pageNumber - 1) * pageSize;
		int skipRowsPlus1 = skipRows + 1;
		int totalRows = pageNumber * pageSize;
		int totalRowsPlus1 = totalRows + 1;
		String useTemplate = paginSQLTemplate;

		// use simple limit ? template if offset is 0
		if (skipRows == 0)
			useTemplate = paginFirstOnlyTemplate;

		if (useTemplate.contains(DISTINCT_TAG)) {
			// if distinct template use non-distinct sql, delete distinct tag
			if (StrUtils.startsWithIgnoreCase(body, "distinct "))
				useTemplate = StrUtils.replace(useTemplate, DISTINCT_TAG, "");
			else {
				// if distinct template use distinct sql, use it
				useTemplate = StrUtils.replace(useTemplate, DISTINCT_TAG, "distinct");
				body = body.substring(9);
			}
		}

		// if have $XXX tag, replaced by real values
		String result = StrUtils.replaceIgnoreCase(useTemplate, SKIP_ROWS, String.valueOf(skipRows));
		result = StrUtils.replaceIgnoreCase(result, PAGESIZE, String.valueOf(pageSize));
		result = StrUtils.replaceIgnoreCase(result, TOTAL_ROWS, String.valueOf(totalRows));
		result = StrUtils.replaceIgnoreCase(result, SKIP_ROWS_PLUS1, String.valueOf(skipRowsPlus1));
		result = StrUtils.replaceIgnoreCase(result, TOTAL_ROWS_PLUS1, String.valueOf(totalRowsPlus1));

		// now insert the customer's real full SQL here
		result = StrUtils.replace(result, "$SQL", sql);

		// or only insert the body without "select "
		result = StrUtils.replace(result, "$BODY", body);
		return result;
	}

}
