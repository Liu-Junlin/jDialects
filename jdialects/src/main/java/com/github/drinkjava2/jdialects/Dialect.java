/*
* jDialects, a tiny SQL dialect tool 
*
* License: GNU Lesser General Public License (LGPL), version 2.1 or later.
* See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
*/
package com.github.drinkjava2.jdialects;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.SQLException;
import java.util.EnumMap;
import java.util.Map;

import javax.sql.DataSource;

import com.github.drinkjava2.hibernate.RowSelection;
import com.github.drinkjava2.hibernate.SQLServer2005LimitHandler;
import com.github.drinkjava2.hibernate.SQLServer2012LimitHandler;
import com.github.drinkjava2.hibernate.StringHelper;

/**
 * jDialects is a small Java project collect all databases' dialect, most are
 * extracted from Hibernate, usually jDialects is used for build pagination SQL
 * and DDL SQL for cross-databases purpose. Currently jDialects support 75
 * database dialects include SQLLite and Access. It requires JDK1.7 or above.
 * <br/>
 * 
 * Note: most of this "Dialect.java" file is generated by source code generator
 * tool(see jDiagen project), and also there is a Excel file
 * "DatabaseDialects.xls", it's useful if you want know difference of databases.
 * <br/>
 * 
 * <pre>
 * How to Use jDialect in project? 
 * Download and put "jdialects-1.0.0.jar" in project class folder, or add below lines in pom.xml:
 *   <dependency>
 *      <groupId>com.github.drinkjava2</groupId>
 *      <artifactId>jdialects</artifactId>
 *     <version>1.0.0</version>
 *   </dependency>
 *  
 * In source code:
 * 1) Build pagination SQL    
 *    Dialect d=guessDialect(dataSource);
 *    String result=dialect.paginate(3, 10, "select * from users where id=?");
 *    
 *    in MySQL5Dialect,    result is: "select * from users  where id=? limit 20, 10"
 *    in Oracle8iDialect,  result is: "select * from ( select row_.*, rownum rownum_ from ( select * from users  where id=? ) row_ ) where rownum_ <= 30 and rownum_ > 20"
 *    in Oracle12cDialect, result is: "select * from users  where id=? offset 20 rows fetch next 10 rows only"
 *    in Sybase11Dialect, throw a DialectExcepiton with message: "Sybase11Dialect" does not support physical pagination
 *    ...
 *    
 * 2) Build cross-database DDL SQL:    	
 *      Dialect d=guessDialect(dataSource);
 *		String ddlSql = "create table test("//
 *				+ "f1 " + d.BIGINT() //
 *				+ ",f3 " + d.BIT() //
 *				+ ",f4 " + d.BLOB() //
 *				+ ",f5 " + d.BOOLEAN() //
 *				+ ",f6 " + d.CHAR() //
 *				+ ")" + d.ENGINE();
 *    if MySql5Dialect, ddlSql will be "create table test(f1 bigint,f3 bit,f4 longblob,f5 bit,f6 char(1))engine=innoDB"
 *    in SQLServer2012Dialect, will get "create table test(f1 int8,f3 bool,f4 oid,f5 boolean,f6 char(1))"
 * 
 * </pre>
 * 
 * @author Yong Zhu
 * @version 1.0.0
 * @since JDK1.7
 * 
 */
public enum Dialect {
	SQLiteDialect, AccessDialect, ExcelDialect, TextDialect, ParadoxDialect, CobolDialect, XMLDialect, DbfDialect, // NOSONAR
	// below are from Hibernate
	@Deprecated DerbyDialect, // NOSONAR Use other Derby version instead
	@Deprecated OracleDialect, // NOSONAR use Oracle8iDialect instead
	@Deprecated Oracle9Dialect, // NOSONAR Use Oracle9i instead
	Cache71Dialect, CUBRIDDialect, DerbyTenFiveDialect, DataDirectOracle9Dialect, DB2Dialect, DB2390Dialect, DB2400Dialect, DerbyTenSevenDialect, DerbyTenSixDialect, FirebirdDialect, FrontBaseDialect, H2Dialect, HANAColumnStoreDialect, HANARowStoreDialect, HSQLDialect, InformixDialect, Informix10Dialect, IngresDialect, Ingres10Dialect, Ingres9Dialect, InterbaseDialect, JDataStoreDialect, MariaDBDialect, MariaDB53Dialect, MckoiDialect, MimerSQLDialect, MySQLDialect, MySQL5Dialect, MySQL55Dialect, MySQL57Dialect, MySQL57InnoDBDialect, MySQL5InnoDBDialect, MySQLInnoDBDialect, MySQLMyISAMDialect, Oracle8iDialect, Oracle9iDialect, Oracle10gDialect, Oracle12cDialect, PointbaseDialect, PostgresPlusDialect, PostgreSQLDialect, PostgreSQL81Dialect, PostgreSQL82Dialect, PostgreSQL9Dialect, PostgreSQL91Dialect, PostgreSQL92Dialect, PostgreSQL93Dialect, PostgreSQL94Dialect, PostgreSQL95Dialect, ProgressDialect, RDMSOS2200Dialect, SAPDBDialect, SQLServerDialect, SQLServer2005Dialect, SQLServer2008Dialect, SQLServer2012Dialect, SybaseDialect, Sybase11Dialect, SybaseAnywhereDialect, SybaseASE15Dialect, SybaseASE157Dialect, TeradataDialect, Teradata14Dialect, TimesTenDialect;// NOSONAR

	private static final String SKIP_ROWS = "$SKIP_ROWS";
	private static final String PAGESIZE = "$PAGESIZE";
	private static final String TOTAL_ROWS = "$TOTAL_ROWS";
	private static final String SKIP_ROWS_PLUS1 = "$SKIP_ROWS_PLUS1";
	private static final String TOTAL_ROWS_PLUS1 = "$TOTAL_ROWS_PLUS1";
	private static final String DISTINCT_TAG = "($DISTINCT)";
	public static final String NOT_SUPPORT = "NOT_SUPPORT";

	private String sqlTemplate = null;
	private String topLimitTemplate = null;
	private Map<Type, String> typeMappings = new EnumMap<Type, String>(Type.class);

	static {
		for (Dialect d : Dialect.values()) {
			d.sqlTemplate = d.initializePaginSQLTemplate();
			d.topLimitTemplate = d.initializeTopLimitSqlTemplate();
			d.initializeTypeMappings();
		}
	}

	private String processType(Type type, int... lengths) {// NOSONAR
		String value = this.typeMappings.get(type);
		if (Type.ENGINE.equals(type))
			return StrUtils.isEmpty(value) ? "" : value;

		if (StrUtils.isEmpty(value) || "N/A".equals(value) || "n/a".equals(value))
			DialectException.throwEX("Type \"" + type + "\" is not supported by dialect \"" + this + "\"");

		if (value.contains("|")) {
			// format example: varchar($l)<255|lvarchar($l)<32739|varchar($l)
			String[] mappings = StringHelper.split("|", value);

			for (String mapping : mappings) {
				if (mapping.contains("<")) {// varchar($l)<255
					String[] limitType = StringHelper.split("<", mapping);
					if (lengths.length > 0 && Integer.parseInt(limitType[1]) < lengths[0])
						return putParamters(type, limitType[0], lengths);
				} else {// varchar($l)
					return putParamters(type, mapping, lengths);
				}
			}
		} else {
			if (value.contains("$")) {
				// always this order: $l, $p, $s
				return putParamters(type, value, lengths);
			} else
				return value;
		}
		return "";
	}

	private String putParamters(Type type, String value, int... lengths) {
		if (lengths.length < StrUtils.countMatches(value, '$'))
			DialectException.throwEX("In Dialect \"" + this + "\", Type \"" + type + "\" should have "
					+ StrUtils.countMatches(value, '$') + " parameters");
		int i = 0;
		String newValue = value;
		if (newValue.contains("$l"))
			newValue = StrUtils.replace(newValue, "$l", String.valueOf(lengths[i++]));
		if (newValue.contains("$p"))
			newValue = StrUtils.replace(newValue, "$p", String.valueOf(lengths[i++]));
		if (newValue.contains("$s"))
			newValue = StrUtils.replace(newValue, "$s", String.valueOf(lengths[i]));
		return newValue;
	}

	//@formatter:off shut off eclipse's formatter
	public String BIGINT(int... lengths) {return processType(Type.BIGINT, lengths);}//NOSONAR
	public String BINARY(int... lengths) {return processType(Type.BINARY, lengths);}//NOSONAR
	public String BIT(int... lengths) {return processType(Type.BIT, lengths);}//NOSONAR
	public String BLOB(int... lengths) {return processType(Type.BLOB, lengths);}//NOSONAR
	public String BOOLEAN(int... lengths) {return processType(Type.BOOLEAN, lengths);}//NOSONAR
	public String CHAR(int... lengths) {return processType(Type.CHAR, lengths);}//NOSONAR
	public String CLOB(int... lengths) {return processType(Type.CLOB, lengths);}//NOSONAR
	public String DATE(int... lengths) {return processType(Type.DATE, lengths);}//NOSONAR
	public String DECIMAL(int... lengths) {return processType(Type.DECIMAL, lengths);}//NOSONAR
	public String DOUBLE(int... lengths) {return processType(Type.DOUBLE, lengths);}//NOSONAR
	public String FLOAT(int... lengths) {return processType(Type.FLOAT, lengths);}//NOSONAR
	public String INTEGER(int... lengths) {return processType(Type.INTEGER, lengths);}//NOSONAR
	public String JAVA_OBJECT(int... lengths) {return processType(Type.JAVA_OBJECT, lengths);}//NOSONAR
	public String LONGNVARCHAR(int... lengths) {return processType(Type.LONGNVARCHAR, lengths);}//NOSONAR
	public String LONGVARBINARY(int... lengths) {return processType(Type.LONGVARBINARY, lengths);}//NOSONAR
	public String LONGVARCHAR(int... lengths) {return processType(Type.LONGVARCHAR, lengths);}//NOSONAR
	public String NCHAR(int... lengths) {return processType(Type.NCHAR, lengths);}//NOSONAR
	public String NCLOB(int... lengths) {return processType(Type.NCLOB, lengths);}//NOSONAR
	public String NUMERIC(int... lengths) {return processType(Type.NUMERIC, lengths);}//NOSONAR
	public String NVARCHAR(int... lengths) {return processType(Type.NVARCHAR, lengths);}//NOSONAR
	public String OTHER(int... lengths) {return processType(Type.OTHER, lengths);}//NOSONAR
	public String REAL(int... lengths) {return processType(Type.REAL, lengths);}//NOSONAR
	public String SMALLINT(int... lengths) {return processType(Type.SMALLINT, lengths);}//NOSONAR
	public String TIME(int... lengths) {return processType(Type.TIME, lengths);}//NOSONAR
	public String TIMESTAMP(int... lengths) {return processType(Type.TIMESTAMP, lengths);}//NOSONAR
	public String TINYINT(int... lengths) {return processType(Type.TINYINT, lengths);}//NOSONAR
	public String VARBINARY(int... lengths) {return processType(Type.VARBINARY, lengths);}//NOSONAR
	public String VARCHAR(int... lengths) {return processType(Type.VARCHAR, lengths);}//NOSONAR
	public String ENGINE(int... lengths) {return processType(Type.ENGINE, lengths);}//NOSONAR
	//@formatter:on 

	// Initialize paginSQLTemplate
	@SuppressWarnings("all")
	private void initializeTypeMappings() {
		switch (this) {
		case SQLiteDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "blob");
			typeMappings.put(Type.BIT, "boolean");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "decimal");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float($p)");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "blob");
			typeMappings.put(Type.LONGVARCHAR, "longvarchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "datetime");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "blob");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case AccessDialect: {
			typeMappings.put(Type.BIGINT, "integer");
			typeMappings.put(Type.BINARY, "binary<255|N/A");
			typeMappings.put(Type.BIT, "boolean");
			typeMappings.put(Type.BLOB, "ole");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "varchar($l)");
			typeMappings.put(Type.CLOB, "longvarchar");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "java_object");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "longvarbinary");
			typeMappings.put(Type.LONGVARCHAR, "longvarchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "currency");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "timestamp");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "varbinary<255|bit varying($l)");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case ExcelDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary");
			typeMappings.put(Type.BIT, "boolean");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "varchar($l)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "longvarchar");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "longvarbinary");
			typeMappings.put(Type.LONGVARCHAR, "longvarchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "numeric(5,0)");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "numeric(3,0)");
			typeMappings.put(Type.VARBINARY, "varbinary");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case TextDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary");
			typeMappings.put(Type.BIT, "boolean");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "varchar($l)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "decimal($p,$s)");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "java_object");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "longvarbinary");
			typeMappings.put(Type.LONGVARCHAR, "longvarchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "numeric(5,0)");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "numeric(3,0)");
			typeMappings.put(Type.VARBINARY, "varbinary");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case ParadoxDialect: {
			typeMappings.put(Type.BIGINT, "integer");
			typeMappings.put(Type.BINARY, "binary");
			typeMappings.put(Type.BIT, "boolean");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "varchar($l)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "java_object");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "longvarbinary");
			typeMappings.put(Type.LONGVARCHAR, "longvarchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "ole");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "varbinary");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case CobolDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary");
			typeMappings.put(Type.BIT, "boolean");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "varchar($l)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "decimal($p,$s)");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "java_object");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "longvarbinary");
			typeMappings.put(Type.LONGVARCHAR, "longvarchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "varbinary");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case XMLDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary");
			typeMappings.put(Type.BIT, "boolean");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "varchar($l)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "longvarchar");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "longvarbinary");
			typeMappings.put(Type.LONGVARCHAR, "longvarchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "numeric(5,0)");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "numeric(3,0)");
			typeMappings.put(Type.VARBINARY, "varbinary");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case DbfDialect: {
			typeMappings.put(Type.BIGINT, "integer");
			typeMappings.put(Type.BINARY, "binary<255|N/A");
			typeMappings.put(Type.BIT, "boolean");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "varchar($l)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "java_object");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "longvarbinary");
			typeMappings.put(Type.LONGVARCHAR, "longvarchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "blob");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "varbinary<255|bit varying($l)");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case Cache71Dialect: {
			typeMappings.put(Type.BIGINT, "BigInt");
			typeMappings.put(Type.BINARY, "varbinary($1)");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "longvarbinary");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "longvarchar");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "decimal");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "longvarbinary");
			typeMappings.put(Type.LONGVARCHAR, "longvarchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "longvarbinary");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case CUBRIDDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "N/A");
			typeMappings.put(Type.BIT, "bit(8)");
			typeMappings.put(Type.BLOB, "bit varying(65535)");
			typeMappings.put(Type.BOOLEAN, "bit(8)");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "string");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "decimal");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "int");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "double");
			typeMappings.put(Type.SMALLINT, "short");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "short");
			typeMappings.put(Type.VARBINARY, "bit varying($l)<2000|bit varying($l)");
			typeMappings.put(Type.VARCHAR, "varchar($l)<255|varchar($l)<2000|string");
		}
			break;
		case DataDirectOracle9Dialect: {
			typeMappings.put(Type.BIGINT, "number(19,0)");
			typeMappings.put(Type.BINARY, "N/A");
			typeMappings.put(Type.BIT, "number(1,0)");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1 char)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "number($p,$s)");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "number(10,0)");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "number($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "number(5,0)");
			typeMappings.put(Type.TIME, "date");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "number(3,0)");
			typeMappings.put(Type.VARBINARY, "raw($l)<2000|long raw");
			typeMappings.put(Type.VARCHAR, "varchar2($l char)<4000|long");
		}
			break;
		case DB2Dialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "char($l) for bit data<254|varchar($l) for bit data");
			typeMappings.put(Type.BIT, "smallint");
			typeMappings.put(Type.BLOB, "blob($l)");
			typeMappings.put(Type.BOOLEAN, "smallint");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "clob($l)");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "long varchar for bit data");
			typeMappings.put(Type.LONGVARCHAR, "long varchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varchar($l) for bit data");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case DB2390Dialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "char($l) for bit data<254|varchar($l) for bit data");
			typeMappings.put(Type.BIT, "smallint");
			typeMappings.put(Type.BLOB, "blob($l)");
			typeMappings.put(Type.BOOLEAN, "smallint");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "clob($l)");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "long varchar for bit data");
			typeMappings.put(Type.LONGVARCHAR, "long varchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varchar($l) for bit data");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case DB2400Dialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "char($l) for bit data<254|varchar($l) for bit data");
			typeMappings.put(Type.BIT, "smallint");
			typeMappings.put(Type.BLOB, "blob($l)");
			typeMappings.put(Type.BOOLEAN, "smallint");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "clob($l)");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "long varchar for bit data");
			typeMappings.put(Type.LONGVARCHAR, "long varchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varchar($l) for bit data");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case DerbyDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "char($l) for bit data<254|varchar($l) for bit data");
			typeMappings.put(Type.BIT, "smallint");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "smallint");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "clob($l)");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "long varchar for bit data");
			typeMappings.put(Type.LONGVARCHAR, "long varchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varchar($l) for bit data");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case DerbyTenFiveDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "char($l) for bit data<254|varchar($l) for bit data");
			typeMappings.put(Type.BIT, "smallint");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "smallint");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "clob($l)");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "long varchar for bit data");
			typeMappings.put(Type.LONGVARCHAR, "long varchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varchar($l) for bit data");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case DerbyTenSevenDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "char($l) for bit data<254|varchar($l) for bit data");
			typeMappings.put(Type.BIT, "smallint");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "clob($l)");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "long varchar for bit data");
			typeMappings.put(Type.LONGVARCHAR, "long varchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varchar($l) for bit data");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case DerbyTenSixDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "char($l) for bit data<254|varchar($l) for bit data");
			typeMappings.put(Type.BIT, "smallint");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "smallint");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "clob($l)");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "long varchar for bit data");
			typeMappings.put(Type.LONGVARCHAR, "long varchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varchar($l) for bit data");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case FirebirdDialect: {
			typeMappings.put(Type.BIGINT, "numeric(18,0)");
			typeMappings.put(Type.BINARY, "N/A");
			typeMappings.put(Type.BIT, "smallint");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "smallint");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "blob sub_type 1");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "blob");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case FrontBaseDialect: {
			typeMappings.put(Type.BIGINT, "longint");
			typeMappings.put(Type.BINARY, "N/A");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "bit varying($l)");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case H2Dialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary");
			typeMappings.put(Type.BIT, "boolean");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char($l)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "decimal($p,$s)");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "longvarbinary");
			typeMappings.put(Type.LONGVARCHAR, "varchar(2147483647)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "decimal($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "binary($l)");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case HANAColumnStoreDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "varbinary($l)<5000|blob");
			typeMappings.put(Type.BIT, "smallint");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "tinyint");
			typeMappings.put(Type.CHAR, "varchar(1)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "decimal($p, $s)");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float($p)");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "varbinary($l)<5000|blob");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)<5000|clob");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)<5000|nclob");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varbinary($l)<5000|blob");
			typeMappings.put(Type.VARCHAR, "varchar($l)<5000|clob");
		}
			break;
		case HANARowStoreDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "varbinary($l)<5000|blob");
			typeMappings.put(Type.BIT, "smallint");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "tinyint");
			typeMappings.put(Type.CHAR, "varchar(1)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "decimal($p, $s)");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float($p)");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "varbinary($l)<5000|blob");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)<5000|clob");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)<5000|nclob");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varbinary($l)<5000|blob");
			typeMappings.put(Type.VARCHAR, "varchar($l)<5000|clob");
		}
			break;
		case HSQLDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "longvarbinary");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char($l)");
			typeMappings.put(Type.CLOB, "longvarchar");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "decimal($p,$s)");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "longvarbinary");
			typeMappings.put(Type.LONGVARCHAR, "longvarchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "clob");
			typeMappings.put(Type.NUMERIC, "numeric");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "varbinary($l)");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case InformixDialect: {
			typeMappings.put(Type.BIGINT, "int8");
			typeMappings.put(Type.BINARY, "byte");
			typeMappings.put(Type.BIT, "smallint");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char($l)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "decimal");
			typeMappings.put(Type.DOUBLE, "float");
			typeMappings.put(Type.FLOAT, "smallfloat");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "blob");
			typeMappings.put(Type.LONGVARCHAR, "clob");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "decimal");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "smallfloat");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "datetime hour to second");
			typeMappings.put(Type.TIMESTAMP, "datetime year to fraction(5)");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "byte");
			typeMappings.put(Type.VARCHAR, "varchar($l)<255|lvarchar($l)<32739|varchar($l)");
		}
			break;
		case Informix10Dialect: {
			typeMappings.put(Type.BIGINT, "int8");
			typeMappings.put(Type.BINARY, "byte");
			typeMappings.put(Type.BIT, "smallint");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char($l)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "decimal");
			typeMappings.put(Type.DOUBLE, "float");
			typeMappings.put(Type.FLOAT, "smallfloat");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "blob");
			typeMappings.put(Type.LONGVARCHAR, "clob");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "decimal");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "smallfloat");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "datetime hour to second");
			typeMappings.put(Type.TIMESTAMP, "datetime year to fraction(5)");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "byte");
			typeMappings.put(Type.VARCHAR, "varchar($l)<255|lvarchar($l)<32739|varchar($l)");
		}
			break;
		case IngresDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "byte($l)<32000|long byte");
			typeMappings.put(Type.BIT, "tinyint");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char($l)<32000|char($l)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "decimal($p, $s)");
			typeMappings.put(Type.DOUBLE, "float");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "long byte");
			typeMappings.put(Type.LONGVARCHAR, "long varchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "decimal($p, $s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time with time zone");
			typeMappings.put(Type.TIMESTAMP, "timestamp with time zone");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "varbyte($l)<32000|long byte");
			typeMappings.put(Type.VARCHAR, "varchar($l)<32000|long varchar");
		}
			break;
		case Ingres10Dialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "byte($l)<32000|long byte");
			typeMappings.put(Type.BIT, "boolean");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char($l)<32000|char($l)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "ansidate");
			typeMappings.put(Type.DECIMAL, "decimal($p, $s)");
			typeMappings.put(Type.DOUBLE, "float");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "long byte");
			typeMappings.put(Type.LONGVARCHAR, "long varchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "decimal($p, $s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time with time zone");
			typeMappings.put(Type.TIMESTAMP, "timestamp(9) with time zone");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "varbyte($l)<32000|long byte");
			typeMappings.put(Type.VARCHAR, "varchar($l)<32000|long varchar");
		}
			break;
		case Ingres9Dialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "byte($l)<32000|long byte");
			typeMappings.put(Type.BIT, "tinyint");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char($l)<32000|char($l)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "ansidate");
			typeMappings.put(Type.DECIMAL, "decimal($p, $s)");
			typeMappings.put(Type.DOUBLE, "float");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "long byte");
			typeMappings.put(Type.LONGVARCHAR, "long varchar");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "decimal($p, $s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time with time zone");
			typeMappings.put(Type.TIMESTAMP, "timestamp(9) with time zone");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "varbyte($l)<32000|long byte");
			typeMappings.put(Type.VARCHAR, "varchar($l)<32000|long varchar");
		}
			break;
		case InterbaseDialect: {
			typeMappings.put(Type.BIGINT, "numeric(18,0)");
			typeMappings.put(Type.BINARY, "N/A");
			typeMappings.put(Type.BIT, "smallint");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "smallint");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "blob sub_type 1");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "blob");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case JDataStoreDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "N/A");
			typeMappings.put(Type.BIT, "tinyint");
			typeMappings.put(Type.BLOB, "varbinary");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "varchar");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p, $s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "varbinary($l)");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case MariaDBDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "longblob");
			typeMappings.put(Type.BOOLEAN, "bit");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "longtext");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "mediumblob<16777215|longblob");
			typeMappings.put(Type.LONGVARCHAR, "longtext");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "longtext");
			typeMappings.put(Type.NUMERIC, "decimal($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "datetime");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "tinyblob<255|blob<65535|mediumblob<16777215|longblob");
			typeMappings.put(Type.VARCHAR, "varchar($l)<65535|longtext");
		}
			break;
		case MariaDB53Dialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "longblob");
			typeMappings.put(Type.BOOLEAN, "bit");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "longtext");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "mediumblob<16777215|longblob");
			typeMappings.put(Type.LONGVARCHAR, "longtext");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "longtext");
			typeMappings.put(Type.NUMERIC, "decimal($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "datetime(6)");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "tinyblob<255|blob<65535|mediumblob<16777215|longblob");
			typeMappings.put(Type.VARCHAR, "varchar($l)<65535|longtext");
		}
			break;
		case MckoiDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "N/A");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "varbinary");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case MimerSQLDialect: {
			typeMappings.put(Type.BIGINT, "BIGINT");
			typeMappings.put(Type.BINARY, "BINARY<2000|BLOB($1)");
			typeMappings.put(Type.BIT, "ODBC.BIT");
			typeMappings.put(Type.BLOB, "BLOB($l)");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "NCHAR(1)");
			typeMappings.put(Type.CLOB, "NCLOB($l)");
			typeMappings.put(Type.DATE, "DATE");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "DOUBLE PRECISION");
			typeMappings.put(Type.FLOAT, "FLOAT");
			typeMappings.put(Type.INTEGER, "INTEGER");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "BLOB($1)");
			typeMappings.put(Type.LONGVARCHAR, "CLOB($1)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "NUMERIC(19, $l)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "SMALLINT");
			typeMappings.put(Type.TIME, "TIME");
			typeMappings.put(Type.TIMESTAMP, "TIMESTAMP");
			typeMappings.put(Type.TINYINT, "ODBC.TINYINT");
			typeMappings.put(Type.VARBINARY, "BINARY VARYING($l)<2000|BLOB($1)");
			typeMappings.put(Type.VARCHAR, "NATIONAL CHARACTER VARYING($l)<2000|NCLOB($l)");
		}
			break;
		case MySQLDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "longblob");
			typeMappings.put(Type.BOOLEAN, "bit");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "longtext");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "mediumblob<16777215|longblob");
			typeMappings.put(Type.LONGVARCHAR, "longtext");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "longtext");
			typeMappings.put(Type.NUMERIC, "decimal($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "datetime");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "tinyblob<255|blob<65535|mediumblob<16777215|longblob");
			typeMappings.put(Type.VARCHAR, "varchar($l)<255|longtext");
		}
			break;
		case MySQL5Dialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "longblob");
			typeMappings.put(Type.BOOLEAN, "bit");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "longtext");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "mediumblob<16777215|longblob");
			typeMappings.put(Type.LONGVARCHAR, "longtext");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "longtext");
			typeMappings.put(Type.NUMERIC, "decimal($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "datetime");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "tinyblob<255|blob<65535|mediumblob<16777215|longblob");
			typeMappings.put(Type.VARCHAR, "varchar($l)<65535|longtext");
		}
			break;
		case MySQL55Dialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "longblob");
			typeMappings.put(Type.BOOLEAN, "bit");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "longtext");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "mediumblob<16777215|longblob");
			typeMappings.put(Type.LONGVARCHAR, "longtext");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "longtext");
			typeMappings.put(Type.NUMERIC, "decimal($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "datetime");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "tinyblob<255|blob<65535|mediumblob<16777215|longblob");
			typeMappings.put(Type.VARCHAR, "varchar($l)<65535|longtext");
		}
			break;
		case MySQL57Dialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "longblob");
			typeMappings.put(Type.BOOLEAN, "bit");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "longtext");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "json");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "mediumblob<16777215|longblob");
			typeMappings.put(Type.LONGVARCHAR, "longtext");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "longtext");
			typeMappings.put(Type.NUMERIC, "decimal($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "datetime(6)");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "tinyblob<255|blob<65535|mediumblob<16777215|longblob");
			typeMappings.put(Type.VARCHAR, "varchar($l)<65535|longtext");
		}
			break;
		case MySQL57InnoDBDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "longblob");
			typeMappings.put(Type.BOOLEAN, "bit");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "longtext");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "json");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "mediumblob<16777215|longblob");
			typeMappings.put(Type.LONGVARCHAR, "longtext");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "longtext");
			typeMappings.put(Type.NUMERIC, "decimal($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "datetime(6)");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "tinyblob<255|blob<65535|mediumblob<16777215|longblob");
			typeMappings.put(Type.VARCHAR, "varchar($l)<65535|longtext");
			typeMappings.put(Type.ENGINE, "engine=innoDB");
		}
			break;
		case MySQL5InnoDBDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "longblob");
			typeMappings.put(Type.BOOLEAN, "bit");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "longtext");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "mediumblob<16777215|longblob");
			typeMappings.put(Type.LONGVARCHAR, "longtext");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "longtext");
			typeMappings.put(Type.NUMERIC, "decimal($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "datetime");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "tinyblob<255|blob<65535|mediumblob<16777215|longblob");
			typeMappings.put(Type.VARCHAR, "varchar($l)<65535|longtext");
			typeMappings.put(Type.ENGINE, "engine=innoDB");
		}
			break;
		case MySQLInnoDBDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "longblob");
			typeMappings.put(Type.BOOLEAN, "bit");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "longtext");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "mediumblob<16777215|longblob");
			typeMappings.put(Type.LONGVARCHAR, "longtext");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "longtext");
			typeMappings.put(Type.NUMERIC, "decimal($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "datetime");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "tinyblob<255|blob<65535|mediumblob<16777215|longblob");
			typeMappings.put(Type.VARCHAR, "varchar($l)<255|longtext");
			typeMappings.put(Type.ENGINE, "engine=innoDB");
		}
			break;
		case MySQLMyISAMDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "longblob");
			typeMappings.put(Type.BOOLEAN, "bit");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "longtext");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "mediumblob<16777215|longblob");
			typeMappings.put(Type.LONGVARCHAR, "longtext");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "longtext");
			typeMappings.put(Type.NUMERIC, "decimal($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "datetime");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "tinyblob<255|blob<65535|mediumblob<16777215|longblob");
			typeMappings.put(Type.VARCHAR, "varchar($l)<255|longtext");
			typeMappings.put(Type.ENGINE, "engine=MyISAM");
		}
			break;
		case OracleDialect: {
			typeMappings.put(Type.BIGINT, "number(19,0)");
			typeMappings.put(Type.BINARY, "N/A");
			typeMappings.put(Type.BIT, "number(1,0)");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "number($p,$s)");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "number(10,0)");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "number($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "number(5,0)");
			typeMappings.put(Type.TIME, "date");
			typeMappings.put(Type.TIMESTAMP, "date");
			typeMappings.put(Type.TINYINT, "number(3,0)");
			typeMappings.put(Type.VARBINARY, "raw($l)<2000|long raw");
			typeMappings.put(Type.VARCHAR, "varchar2($l)<4000|long");
		}
			break;
		case Oracle10gDialect: {
			typeMappings.put(Type.BIGINT, "number(19,0)");
			typeMappings.put(Type.BINARY, "raw($l)<2000|long raw");
			typeMappings.put(Type.BIT, "number(1,0)");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "number(1,0)");
			typeMappings.put(Type.CHAR, "char(1 char)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "number($p,$s)");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "number(10,0)");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar2($l)");
			typeMappings.put(Type.LONGVARBINARY, "long raw");
			typeMappings.put(Type.LONGVARCHAR, "long");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "number($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar2($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "number(5,0)");
			typeMappings.put(Type.TIME, "date");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "number(3,0)");
			typeMappings.put(Type.VARBINARY, "raw($l)<2000|long raw");
			typeMappings.put(Type.VARCHAR, "varchar2($l char)<4000|long");
		}
			break;
		case Oracle12cDialect: {
			typeMappings.put(Type.BIGINT, "number(19,0)");
			typeMappings.put(Type.BINARY, "raw($l)<2000|long raw");
			typeMappings.put(Type.BIT, "number(1,0)");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "number(1,0)");
			typeMappings.put(Type.CHAR, "char(1 char)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "number($p,$s)");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "number(10,0)");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar2($l)");
			typeMappings.put(Type.LONGVARBINARY, "long raw");
			typeMappings.put(Type.LONGVARCHAR, "long");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "number($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar2($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "number(5,0)");
			typeMappings.put(Type.TIME, "date");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "number(3,0)");
			typeMappings.put(Type.VARBINARY, "raw($l)<2000|long raw");
			typeMappings.put(Type.VARCHAR, "varchar2($l char)<4000|long");
		}
			break;
		case Oracle8iDialect: {
			typeMappings.put(Type.BIGINT, "number(19,0)");
			typeMappings.put(Type.BINARY, "raw($l)<2000|long raw");
			typeMappings.put(Type.BIT, "number(1,0)");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "number(1,0)");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "number($p,$s)");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "number(10,0)");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "long raw");
			typeMappings.put(Type.LONGVARCHAR, "long");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "number($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "number(5,0)");
			typeMappings.put(Type.TIME, "date");
			typeMappings.put(Type.TIMESTAMP, "date");
			typeMappings.put(Type.TINYINT, "number(3,0)");
			typeMappings.put(Type.VARBINARY, "raw($l)<2000|long raw");
			typeMappings.put(Type.VARCHAR, "varchar2($l)<4000|long");
		}
			break;
		case Oracle9Dialect: {
			typeMappings.put(Type.BIGINT, "number(19,0)");
			typeMappings.put(Type.BINARY, "N/A");
			typeMappings.put(Type.BIT, "number(1,0)");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1 char)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "number($p,$s)");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "number(10,0)");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "number($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "number(5,0)");
			typeMappings.put(Type.TIME, "date");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "number(3,0)");
			typeMappings.put(Type.VARBINARY, "raw($l)<2000|long raw");
			typeMappings.put(Type.VARCHAR, "varchar2($l char)<4000|long");
		}
			break;
		case Oracle9iDialect: {
			typeMappings.put(Type.BIGINT, "number(19,0)");
			typeMappings.put(Type.BINARY, "raw($l)<2000|long raw");
			typeMappings.put(Type.BIT, "number(1,0)");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "number(1,0)");
			typeMappings.put(Type.CHAR, "char(1 char)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "number($p,$s)");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "number(10,0)");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar2($l)");
			typeMappings.put(Type.LONGVARBINARY, "long raw");
			typeMappings.put(Type.LONGVARCHAR, "long");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "number($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar2($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "number(5,0)");
			typeMappings.put(Type.TIME, "date");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "number(3,0)");
			typeMappings.put(Type.VARBINARY, "raw($l)<2000|long raw");
			typeMappings.put(Type.VARCHAR, "varchar2($l char)<4000|long");
		}
			break;
		case PointbaseDialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "N/A");
			typeMappings.put(Type.BIT, "smallint");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "blob($l)");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case PostgresPlusDialect: {
			typeMappings.put(Type.BIGINT, "int8");
			typeMappings.put(Type.BINARY, "bytea");
			typeMappings.put(Type.BIT, "bool");
			typeMappings.put(Type.BLOB, "oid");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "float8");
			typeMappings.put(Type.FLOAT, "float4");
			typeMappings.put(Type.INTEGER, "int4");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bytea");
			typeMappings.put(Type.LONGVARCHAR, "text");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p, $s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "uuid");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "int2");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "int2");
			typeMappings.put(Type.VARBINARY, "bytea");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case PostgreSQLDialect: {
			typeMappings.put(Type.BIGINT, "int8");
			typeMappings.put(Type.BINARY, "bytea");
			typeMappings.put(Type.BIT, "bool");
			typeMappings.put(Type.BLOB, "oid");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "float8");
			typeMappings.put(Type.FLOAT, "float4");
			typeMappings.put(Type.INTEGER, "int4");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bytea");
			typeMappings.put(Type.LONGVARCHAR, "text");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p, $s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "uuid");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "int2");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "int2");
			typeMappings.put(Type.VARBINARY, "bytea");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case PostgreSQL81Dialect: {
			typeMappings.put(Type.BIGINT, "int8");
			typeMappings.put(Type.BINARY, "bytea");
			typeMappings.put(Type.BIT, "bool");
			typeMappings.put(Type.BLOB, "oid");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "float8");
			typeMappings.put(Type.FLOAT, "float4");
			typeMappings.put(Type.INTEGER, "int4");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bytea");
			typeMappings.put(Type.LONGVARCHAR, "text");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p, $s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "uuid");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "int2");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "int2");
			typeMappings.put(Type.VARBINARY, "bytea");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case PostgreSQL82Dialect: {
			typeMappings.put(Type.BIGINT, "int8");
			typeMappings.put(Type.BINARY, "bytea");
			typeMappings.put(Type.BIT, "bool");
			typeMappings.put(Type.BLOB, "oid");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "float8");
			typeMappings.put(Type.FLOAT, "float4");
			typeMappings.put(Type.INTEGER, "int4");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bytea");
			typeMappings.put(Type.LONGVARCHAR, "text");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p, $s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "uuid");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "int2");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "int2");
			typeMappings.put(Type.VARBINARY, "bytea");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case PostgreSQL9Dialect: {
			typeMappings.put(Type.BIGINT, "int8");
			typeMappings.put(Type.BINARY, "bytea");
			typeMappings.put(Type.BIT, "bool");
			typeMappings.put(Type.BLOB, "oid");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "float8");
			typeMappings.put(Type.FLOAT, "float4");
			typeMappings.put(Type.INTEGER, "int4");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bytea");
			typeMappings.put(Type.LONGVARCHAR, "text");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p, $s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "uuid");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "int2");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "int2");
			typeMappings.put(Type.VARBINARY, "bytea");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case PostgreSQL91Dialect: {
			typeMappings.put(Type.BIGINT, "int8");
			typeMappings.put(Type.BINARY, "bytea");
			typeMappings.put(Type.BIT, "bool");
			typeMappings.put(Type.BLOB, "oid");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "float8");
			typeMappings.put(Type.FLOAT, "float4");
			typeMappings.put(Type.INTEGER, "int4");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bytea");
			typeMappings.put(Type.LONGVARCHAR, "text");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p, $s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "uuid");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "int2");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "int2");
			typeMappings.put(Type.VARBINARY, "bytea");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case PostgreSQL92Dialect: {
			typeMappings.put(Type.BIGINT, "int8");
			typeMappings.put(Type.BINARY, "bytea");
			typeMappings.put(Type.BIT, "bool");
			typeMappings.put(Type.BLOB, "oid");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "float8");
			typeMappings.put(Type.FLOAT, "float4");
			typeMappings.put(Type.INTEGER, "int4");
			typeMappings.put(Type.JAVA_OBJECT, "json");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bytea");
			typeMappings.put(Type.LONGVARCHAR, "text");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p, $s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "uuid");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "int2");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "int2");
			typeMappings.put(Type.VARBINARY, "bytea");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case PostgreSQL93Dialect: {
			typeMappings.put(Type.BIGINT, "int8");
			typeMappings.put(Type.BINARY, "bytea");
			typeMappings.put(Type.BIT, "bool");
			typeMappings.put(Type.BLOB, "oid");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "float8");
			typeMappings.put(Type.FLOAT, "float4");
			typeMappings.put(Type.INTEGER, "int4");
			typeMappings.put(Type.JAVA_OBJECT, "json");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bytea");
			typeMappings.put(Type.LONGVARCHAR, "text");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p, $s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "uuid");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "int2");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "int2");
			typeMappings.put(Type.VARBINARY, "bytea");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case PostgreSQL94Dialect: {
			typeMappings.put(Type.BIGINT, "int8");
			typeMappings.put(Type.BINARY, "bytea");
			typeMappings.put(Type.BIT, "bool");
			typeMappings.put(Type.BLOB, "oid");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "float8");
			typeMappings.put(Type.FLOAT, "float4");
			typeMappings.put(Type.INTEGER, "int4");
			typeMappings.put(Type.JAVA_OBJECT, "json");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bytea");
			typeMappings.put(Type.LONGVARCHAR, "text");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p, $s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "uuid");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "int2");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "int2");
			typeMappings.put(Type.VARBINARY, "bytea");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case PostgreSQL95Dialect: {
			typeMappings.put(Type.BIGINT, "int8");
			typeMappings.put(Type.BINARY, "bytea");
			typeMappings.put(Type.BIT, "bool");
			typeMappings.put(Type.BLOB, "oid");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "float8");
			typeMappings.put(Type.FLOAT, "float4");
			typeMappings.put(Type.INTEGER, "int4");
			typeMappings.put(Type.JAVA_OBJECT, "json");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bytea");
			typeMappings.put(Type.LONGVARCHAR, "text");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p, $s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "uuid");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "int2");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "int2");
			typeMappings.put(Type.VARBINARY, "bytea");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case ProgressDialect: {
			typeMappings.put(Type.BIGINT, "numeric");
			typeMappings.put(Type.BINARY, "N/A");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "blob");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "character(1)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "real");
			typeMappings.put(Type.INTEGER, "integer");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "tinyint");
			typeMappings.put(Type.VARBINARY, "varbinary($l)");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case RDMSOS2200Dialect: {
			typeMappings.put(Type.BIGINT, "NUMERIC(21,0)");
			typeMappings.put(Type.BINARY, "N/A");
			typeMappings.put(Type.BIT, "SMALLINT");
			typeMappings.put(Type.BLOB, "BLOB($l)");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "CHARACTER(1)");
			typeMappings.put(Type.CLOB, "clob");
			typeMappings.put(Type.DATE, "DATE");
			typeMappings.put(Type.DECIMAL, "NUMERIC(21,$l)");
			typeMappings.put(Type.DOUBLE, "DOUBLE PRECISION");
			typeMappings.put(Type.FLOAT, "FLOAT");
			typeMappings.put(Type.INTEGER, "INTEGER");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "NUMERIC(21,$l)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "REAL");
			typeMappings.put(Type.SMALLINT, "SMALLINT");
			typeMappings.put(Type.TIME, "TIME");
			typeMappings.put(Type.TIMESTAMP, "TIMESTAMP");
			typeMappings.put(Type.TINYINT, "SMALLINT");
			typeMappings.put(Type.VARBINARY, "bit varying($l)");
			typeMappings.put(Type.VARCHAR, "CHARACTER($l)");
		}
			break;
		case SAPDBDialect: {
			typeMappings.put(Type.BIGINT, "fixed(19,0)");
			typeMappings.put(Type.BINARY, "N/A");
			typeMappings.put(Type.BIT, "boolean");
			typeMappings.put(Type.BLOB, "long byte");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "long varchar");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "int");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "fixed($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "timestamp");
			typeMappings.put(Type.TINYINT, "fixed(3,0)");
			typeMappings.put(Type.VARBINARY, "long byte");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case SQLServerDialect: {
			typeMappings.put(Type.BIGINT, "numeric(19,0)");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "tinyint");
			typeMappings.put(Type.BLOB, "image");
			typeMappings.put(Type.BOOLEAN, "bit");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "datetime");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "int");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "image");
			typeMappings.put(Type.LONGVARCHAR, "text");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "datetime");
			typeMappings.put(Type.TIMESTAMP, "datetime");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varbinary($l)<8000|image");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case SQLServer2005Dialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "varbinary(MAX)");
			typeMappings.put(Type.BOOLEAN, "bit");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "varchar(MAX)");
			typeMappings.put(Type.DATE, "datetime");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "int");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "varbinary(MAX)");
			typeMappings.put(Type.LONGVARCHAR, "varchar(MAX)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nvarchar(MAX)");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "datetime");
			typeMappings.put(Type.TIMESTAMP, "datetime");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varbinary($l)<8000|varbinary(MAX)");
			typeMappings.put(Type.VARCHAR, "varchar($l)<8000|varchar(MAX)");
		}
			break;
		case SQLServer2008Dialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "varbinary(MAX)");
			typeMappings.put(Type.BOOLEAN, "bit");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "varchar(MAX)");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "int");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "varbinary(MAX)");
			typeMappings.put(Type.LONGVARCHAR, "varchar(MAX)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nvarchar(MAX)");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)<4000|nvarchar(MAX)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "datetime2");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varbinary($l)<8000|varbinary(MAX)");
			typeMappings.put(Type.VARCHAR, "varchar($l)<8000|varchar(MAX)");
		}
			break;
		case SQLServer2012Dialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "bit");
			typeMappings.put(Type.BLOB, "varbinary(MAX)");
			typeMappings.put(Type.BOOLEAN, "bit");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "varchar(MAX)");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "int");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "varbinary(MAX)");
			typeMappings.put(Type.LONGVARCHAR, "varchar(MAX)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nvarchar(MAX)");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)<4000|nvarchar(MAX)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "datetime2");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varbinary($l)<8000|varbinary(MAX)");
			typeMappings.put(Type.VARCHAR, "varchar($l)<8000|varchar(MAX)");
		}
			break;
		case SybaseDialect: {
			typeMappings.put(Type.BIGINT, "numeric(19,0)");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "tinyint");
			typeMappings.put(Type.BLOB, "image");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "datetime");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "int");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "datetime");
			typeMappings.put(Type.TIMESTAMP, "datetime");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varbinary($l)");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case Sybase11Dialect: {
			typeMappings.put(Type.BIGINT, "numeric(19,0)");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "tinyint");
			typeMappings.put(Type.BLOB, "image");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "datetime");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "int");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "datetime");
			typeMappings.put(Type.TIMESTAMP, "datetime");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varbinary($l)");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case SybaseAnywhereDialect: {
			typeMappings.put(Type.BIGINT, "numeric(19,0)");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "tinyint");
			typeMappings.put(Type.BLOB, "image");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "datetime");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "int");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "datetime");
			typeMappings.put(Type.TIMESTAMP, "datetime");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varbinary($l)");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case SybaseASE15Dialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "tinyint");
			typeMappings.put(Type.BLOB, "image");
			typeMappings.put(Type.BOOLEAN, "tinyint");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "numeric($p,$s)");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "int");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "image");
			typeMappings.put(Type.LONGVARCHAR, "text");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "datetime");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varbinary($l)");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case SybaseASE157Dialect: {
			typeMappings.put(Type.BIGINT, "bigint");
			typeMappings.put(Type.BINARY, "binary($l)");
			typeMappings.put(Type.BIT, "tinyint");
			typeMappings.put(Type.BLOB, "image");
			typeMappings.put(Type.BOOLEAN, "tinyint");
			typeMappings.put(Type.CHAR, "char(1)");
			typeMappings.put(Type.CLOB, "text");
			typeMappings.put(Type.DATE, "date");
			typeMappings.put(Type.DECIMAL, "numeric($p,$s)");
			typeMappings.put(Type.DOUBLE, "double precision");
			typeMappings.put(Type.FLOAT, "float");
			typeMappings.put(Type.INTEGER, "int");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "image");
			typeMappings.put(Type.LONGVARCHAR, "text");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "numeric($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "smallint");
			typeMappings.put(Type.TIME, "time");
			typeMappings.put(Type.TIMESTAMP, "datetime");
			typeMappings.put(Type.TINYINT, "smallint");
			typeMappings.put(Type.VARBINARY, "varbinary($l)");
			typeMappings.put(Type.VARCHAR, "varchar($l)");
		}
			break;
		case TeradataDialect: {
			typeMappings.put(Type.BIGINT, "NUMERIC(18,0)");
			typeMappings.put(Type.BINARY, "BYTEINT");
			typeMappings.put(Type.BIT, "BYTEINT");
			typeMappings.put(Type.BLOB, "BLOB");
			typeMappings.put(Type.BOOLEAN, "BYTEINT");
			typeMappings.put(Type.CHAR, "CHAR(1)");
			typeMappings.put(Type.CLOB, "CLOB");
			typeMappings.put(Type.DATE, "DATE");
			typeMappings.put(Type.DECIMAL, "DECIMAL");
			typeMappings.put(Type.DOUBLE, "DOUBLE PRECISION");
			typeMappings.put(Type.FLOAT, "FLOAT");
			typeMappings.put(Type.INTEGER, "INTEGER");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "LONG VARCHAR");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "NUMERIC($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "SMALLINT");
			typeMappings.put(Type.TIME, "TIME");
			typeMappings.put(Type.TIMESTAMP, "TIMESTAMP");
			typeMappings.put(Type.TINYINT, "BYTEINT");
			typeMappings.put(Type.VARBINARY, "VARBYTE($l)");
			typeMappings.put(Type.VARCHAR, "VARCHAR($l)");
		}
			break;
		case Teradata14Dialect: {
			typeMappings.put(Type.BIGINT, "BIGINT");
			typeMappings.put(Type.BINARY, "VARBYTE(100)");
			typeMappings.put(Type.BIT, "BYTEINT");
			typeMappings.put(Type.BLOB, "BLOB");
			typeMappings.put(Type.BOOLEAN, "BYTEINT");
			typeMappings.put(Type.CHAR, "CHAR(1)");
			typeMappings.put(Type.CLOB, "CLOB");
			typeMappings.put(Type.DATE, "DATE");
			typeMappings.put(Type.DECIMAL, "DECIMAL");
			typeMappings.put(Type.DOUBLE, "DOUBLE PRECISION");
			typeMappings.put(Type.FLOAT, "FLOAT");
			typeMappings.put(Type.INTEGER, "INTEGER");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "VARBYTE(32000)");
			typeMappings.put(Type.LONGVARCHAR, "VARCHAR(32000)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "NUMERIC($p,$s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "SMALLINT");
			typeMappings.put(Type.TIME, "TIME");
			typeMappings.put(Type.TIMESTAMP, "TIMESTAMP");
			typeMappings.put(Type.TINYINT, "BYTEINT");
			typeMappings.put(Type.VARBINARY, "VARBYTE($l)");
			typeMappings.put(Type.VARCHAR, "VARCHAR($l)");
		}
			break;
		case TimesTenDialect: {
			typeMappings.put(Type.BIGINT, "BIGINT");
			typeMappings.put(Type.BINARY, "N/A");
			typeMappings.put(Type.BIT, "TINYINT");
			typeMappings.put(Type.BLOB, "VARBINARY(4000000)");
			typeMappings.put(Type.BOOLEAN, "boolean");
			typeMappings.put(Type.CHAR, "CHAR(1)");
			typeMappings.put(Type.CLOB, "VARCHAR(4000000)");
			typeMappings.put(Type.DATE, "DATE");
			typeMappings.put(Type.DECIMAL, "N/A");
			typeMappings.put(Type.DOUBLE, "DOUBLE");
			typeMappings.put(Type.FLOAT, "FLOAT");
			typeMappings.put(Type.INTEGER, "INTEGER");
			typeMappings.put(Type.JAVA_OBJECT, "N/A");
			typeMappings.put(Type.LONGNVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.LONGVARBINARY, "bit varying($l)");
			typeMappings.put(Type.LONGVARCHAR, "varchar($l)");
			typeMappings.put(Type.NCHAR, "nchar($l)");
			typeMappings.put(Type.NCLOB, "nclob");
			typeMappings.put(Type.NUMERIC, "DECIMAL($p, $s)");
			typeMappings.put(Type.NVARCHAR, "nvarchar($l)");
			typeMappings.put(Type.OTHER, "N/A");
			typeMappings.put(Type.REAL, "real");
			typeMappings.put(Type.SMALLINT, "SMALLINT");
			typeMappings.put(Type.TIME, "TIME");
			typeMappings.put(Type.TIMESTAMP, "TIMESTAMP");
			typeMappings.put(Type.TINYINT, "TINYINT");
			typeMappings.put(Type.VARBINARY, "VARBINARY($l)");
			typeMappings.put(Type.VARCHAR, "VARCHAR($l)");
		}
			break;
		default:
		}
	}

	// ====================================================
	// ====================================================

	/**
	 * Returen sql template
	 */
	private String initializePaginSQLTemplate() { // NOSONAR
		switch (this) {// NOSONAR
		case Cache71Dialect:
		case DB2390Dialect:
		case FrontBaseDialect:
		case InformixDialect:
		case IngresDialect:
		case JDataStoreDialect:
		case MckoiDialect:
		case MimerSQLDialect:
		case PointbaseDialect:
		case ProgressDialect:
		case RDMSOS2200Dialect:
		case SAPDBDialect:
		case SQLServerDialect:
		case Sybase11Dialect:
		case SybaseASE157Dialect:
		case SybaseASE15Dialect:
		case SybaseAnywhereDialect:
		case SybaseDialect:
		case Teradata14Dialect:
		case TeradataDialect:
		case TimesTenDialect:
			return NOT_SUPPORT;
		case SQLServer2005Dialect:
		case SQLServer2008Dialect:
			return "WITH query AS (SELECT TMP_.*, ROW_NUMBER() OVER (ORDER BY CURRENT_TIMESTAMP) as ROW_NUM_ FROM ( select ($DISTINCT) TOP($TOTAL_ROWS) $BODY ) TMP_ ) SELECT $FIELDS_OR_ALIAS FROM query WHERE ROW_NUM_ >= $SKIP_ROWS_PLUS1 AND ROW_NUM_ < $TOTAL_ROWS_PLUS1";
		case H2Dialect:
		case HANAColumnStoreDialect:
		case HANARowStoreDialect:
		case PostgreSQL81Dialect:
		case PostgreSQL82Dialect:
		case PostgreSQL91Dialect:
		case PostgreSQL92Dialect:
		case PostgreSQL93Dialect:
		case PostgreSQL94Dialect:
		case PostgreSQL95Dialect:
		case PostgreSQL9Dialect:
		case PostgreSQLDialect:
		case PostgresPlusDialect:
		case SQLiteDialect:
			return "select $BODY limit $PAGESIZE offset $SKIP_ROWS";
		case AccessDialect:
		case CUBRIDDialect:
		case CobolDialect:
		case DbfDialect:
		case ExcelDialect:
		case MariaDB53Dialect:
		case MariaDBDialect:
		case MySQL55Dialect:
		case MySQL57Dialect:
		case MySQL57InnoDBDialect:
		case MySQL5Dialect:
		case MySQL5InnoDBDialect:
		case MySQLDialect:
		case MySQLInnoDBDialect:
		case MySQLMyISAMDialect:
		case ParadoxDialect:
		case TextDialect:
		case XMLDialect:
			return "select $BODY limit $SKIP_ROWS, $PAGESIZE";
		case Oracle12cDialect:
		case SQLServer2012Dialect:
			return "select $BODY offset $SKIP_ROWS rows fetch next $PAGESIZE rows only";
		case Ingres10Dialect:
		case Ingres9Dialect:
			return "select $BODY offset $skip_rows fetch first $pagesize rows only";
		case DerbyDialect:
		case DerbyTenFiveDialect:
		case DerbyTenSevenDialect:
		case DerbyTenSixDialect:
			return "select $BODY offset $skip_rows rows fetch next $pagesize rows only";
		case InterbaseDialect:
			return "select $BODY rows $SKIP_ROWS to $PAGESIZE";
		case DB2400Dialect:
		case DB2Dialect:
			return "select * from ( select inner2_.*, rownumber() over(order by order of inner2_) as rownumber_ from ( select $BODY fetch first $total_rows rows only ) as inner2_ ) as inner1_ where rownumber_ > $skip_rows order by rownumber_";
		case Oracle8iDialect:
		case OracleDialect:
			return "select * from ( select row_.*, rownum rownum_ from ( select $BODY ) row_ ) where rownum_ <= $TOTAL_ROWS and rownum_ > $SKIP_ROWS";
		case DataDirectOracle9Dialect:
		case Oracle10gDialect:
		case Oracle9Dialect:
		case Oracle9iDialect:
			return "select * from ( select row_.*, rownum rownum_ from ( select $BODY ) row_ where rownum <= $TOTAL_ROWS) where rownum_ > $SKIP_ROWS";
		case Informix10Dialect:
			return "select SKIP $skip_rows first $pagesize $BODY";
		case FirebirdDialect:
			return "select first $PAGESIZE skip $SKIP_ROWS $BODY";
		case HSQLDialect:
			return "select limit $SKIP_ROWS $PAGESIZE $BODY";
		default:
			return NOT_SUPPORT;
		}
	}

	/**
	 * return top limit sql template
	 */
	private String initializeTopLimitSqlTemplate() {// NOSONAR
		switch (this) {// NOSONAR
		case FrontBaseDialect:
		case JDataStoreDialect:
		case MckoiDialect:
		case MimerSQLDialect:
		case PointbaseDialect:
		case ProgressDialect:
		case SAPDBDialect:
		case Sybase11Dialect:
		case SybaseASE157Dialect:
		case SybaseASE15Dialect:
		case SybaseAnywhereDialect:
		case SybaseDialect:
		case Teradata14Dialect:
		case TeradataDialect:
			return NOT_SUPPORT;
		case Oracle12cDialect:
			return "select $BODY fetch first $PAGESIZE rows only";
		case DB2390Dialect:
		case DB2400Dialect:
		case DB2Dialect:
		case DerbyDialect:
		case DerbyTenFiveDialect:
		case DerbyTenSevenDialect:
		case DerbyTenSixDialect:
		case Ingres10Dialect:
		case Ingres9Dialect:
			return "select $BODY fetch first $pagesize rows only";
		case RDMSOS2200Dialect:
			return "select $BODY fetch first $pagesize rows only ";
		case AccessDialect:
		case CUBRIDDialect:
		case CobolDialect:
		case DbfDialect:
		case ExcelDialect:
		case H2Dialect:
		case HANAColumnStoreDialect:
		case HANARowStoreDialect:
		case MariaDB53Dialect:
		case MariaDBDialect:
		case MySQL55Dialect:
		case MySQL57Dialect:
		case MySQL57InnoDBDialect:
		case MySQL5Dialect:
		case MySQL5InnoDBDialect:
		case MySQLDialect:
		case MySQLInnoDBDialect:
		case MySQLMyISAMDialect:
		case ParadoxDialect:
		case PostgreSQL81Dialect:
		case PostgreSQL82Dialect:
		case PostgreSQL91Dialect:
		case PostgreSQL92Dialect:
		case PostgreSQL93Dialect:
		case PostgreSQL94Dialect:
		case PostgreSQL95Dialect:
		case PostgreSQL9Dialect:
		case PostgreSQLDialect:
		case PostgresPlusDialect:
		case SQLiteDialect:
		case TextDialect:
		case XMLDialect:
			return "select $BODY limit $PAGESIZE";
		case SQLServer2012Dialect:
			return "select $BODY offset 0 rows fetch next $PAGESIZE rows only";
		case InterbaseDialect:
			return "select $BODY rows $PAGESIZE";
		case SQLServer2005Dialect:
		case SQLServer2008Dialect:
			return "select ($DISTINCT) TOP($PAGESIZE) $BODY";
		case Cache71Dialect:
			return "select ($DISTINCT) top $PAGESIZE $BODY";
		case SQLServerDialect:
			return "select ($DISTINCT) top $pagesize $BODY";
		case DataDirectOracle9Dialect:
		case Oracle10gDialect:
		case Oracle8iDialect:
		case Oracle9Dialect:
		case Oracle9iDialect:
		case OracleDialect:
			return "select * from ( select $BODY ) where rownum <= $PAGESIZE";
		case FirebirdDialect:
			return "select first $PAGESIZE $BODY";
		case Informix10Dialect:
		case InformixDialect:
		case IngresDialect:
		case TimesTenDialect:
			return "select first $pagesize $BODY";
		case HSQLDialect:
			return "select top $PAGESIZE $BODY";
		default:
			return NOT_SUPPORT;
		}
	}

	private static String aTopLimitSqlExample(String template) {
		String result = StrUtils.replaceIgnoreCase(template, "$SQL", "select * from users order by userid");
		result = StrUtils.replaceIgnoreCase(result, "$BODY", "* from users order by userid");
		result = StrUtils.replaceIgnoreCase(result, " " + DISTINCT_TAG, "");
		result = StrUtils.replaceIgnoreCase(result, SKIP_ROWS, "0");
		result = StrUtils.replaceIgnoreCase(result, PAGESIZE, "10");
		result = StrUtils.replaceIgnoreCase(result, TOTAL_ROWS, "10");
		return result;
	}

	/**
	 * SQL SERVER is complex, don't want re-invent wheel, copy Hibernate's
	 * source code in this project do the dirty job
	 */
	private static String processSQLServer(Dialect dialect, int pageNumber, int pageSize, String sql) {
		int skipRows = (pageNumber - 1) * pageSize;
		int totalRows = pageNumber * pageSize;

		RowSelection selection = new RowSelection(skipRows, totalRows);
		String result = null;
		switch (dialect) {
		case SQLServer2005Dialect:
		case SQLServer2008Dialect:
			result = new SQLServer2005LimitHandler().processSql(sql, selection);
			break;
		case SQLServer2012Dialect:
			result = new SQLServer2012LimitHandler().processSql(sql, selection);
			break;
		default:
		}
		result = StringHelper.replace(result, "__hibernate_row_nr__", "_ROW_NUM_");
		// Replace a special top tag
		result = StringHelper.replaceOnce(result, " $Top_Tag(?) ", " TOP(" + totalRows + ") ");
		result = StringHelper.replaceOnce(result, "_ROW_NUM_ >= ? AND _ROW_NUM_ < ?",
				"_ROW_NUM_ >= " + (skipRows + 1) + " AND _ROW_NUM_ < " + (totalRows + 1));
		result = StringHelper.replaceOnce(result, "offset ? rows fetch next ? rows only",
				"offset " + skipRows + " rows fetch next " + pageSize + " rows only");
		result = StringHelper.replaceOnce(result, "offset 0 rows fetch next ? rows only",
				"offset 0 rows fetch next " + pageSize + " rows only");

		if (StrUtils.isEmpty(result))
			return (String) DialectException.throwEX("Unexpected error, please report this bug");
		return result;
	}

	// ====================================================
	// ====================================================
	/**
	 * Guess dialect based on given JDBC connection instance, Note: this method
	 * does not close connection
	 * 
	 * @param jdbcConnection
	 * @return dialect or null if not found
	 */
	public static Dialect guessDialect(DataSource datasource) {
		Connection con = null;
		try {
			con = datasource.getConnection();
			return guessDialect(con);
		} catch (SQLException e) {
			return (Dialect) DialectException.throwEX(e, e.getMessage());
		} finally {
			try {
				if (con != null && !con.isClosed()) {
					try {// NOSONAR
						con.close();
					} catch (SQLException e) {
						DialectException.throwEX(e, e.getMessage());
					}
				}
			} catch (SQLException e) {
				DialectException.throwEX(e, e.getMessage());
			}
		}
	}

	/**
	 * Guess dialect based on given JDBC connection instance, Note: this method
	 * does not close connection
	 * 
	 * @param jdbcConnection
	 * @return dialect or null if not found
	 */
	public static Dialect guessDialect(Connection jdbcConnection) {
		String databaseName;
		int majorVersion;
		int minorVersion;
		try {
			DatabaseMetaData meta = jdbcConnection.getMetaData();
			databaseName = meta.getDatabaseProductName();
			majorVersion = meta.getDatabaseMajorVersion();
			minorVersion = meta.getDatabaseMinorVersion();
		} catch (SQLException e) {
			return (Dialect) DialectException.throwEX(e, e.getMessage());
		}
		return Dialect.guessDialect(databaseName, majorVersion, minorVersion);
	}

	/**
	 * Guess Dialect by give databaseName, MajorVersion, majorVersion
	 * 
	 * @param databaseName
	 *            database name
	 * @param majorVersion
	 *            major version, Optional
	 * @param minorVersion
	 *            minor version, Optional
	 * @return dialect or null if not found
	 */
	public static Dialect guessDialect(String databaseName, Object... majorVersionMinorVersion) {// NOSONAR
		int majorVersion = 0;
		int minorVersion = 0;
		for (int i = 0; i < majorVersionMinorVersion.length; i++) {
			if (i == 0)
				majorVersion = (Integer) majorVersionMinorVersion[i];
			if (i == 1)
				minorVersion = (Integer) majorVersionMinorVersion[i];
		}
		if ("CUBRID".equalsIgnoreCase(databaseName))
			return CUBRIDDialect;
		if ("HSQL Database Engine".equals(databaseName))
			return HSQLDialect;
		if ("H2".equals(databaseName))
			return H2Dialect;
		if ("MySQL".equals(databaseName))
			if (majorVersion >= 5)
				return MySQL5Dialect;
			else
				return MySQLDialect;
		if ("PostgreSQL".equals(databaseName)) {
			if (majorVersion == 9) {
				if (minorVersion >= 4) {
					return PostgreSQL94Dialect;
				} else if (minorVersion >= 2) {
					return PostgreSQL92Dialect;
				}
				return PostgreSQL9Dialect;
			}
			if (majorVersion == 8 && minorVersion >= 2) {
				return PostgreSQL82Dialect;
			}
			return PostgreSQL81Dialect;
		}
		if ("EnterpriseDB".equals(databaseName))
			return PostgresPlusDialect;
		if ("Apache Derby".equals(databaseName)) {
			if (majorVersion > 10 || (majorVersion == 10 && minorVersion >= 7))
				return DerbyTenSevenDialect;
			else if (majorVersion == 10 && minorVersion == 6)
				return DerbyTenSixDialect;
			else if (majorVersion == 10 && minorVersion == 5)
				return DerbyTenFiveDialect;
			else
				return DerbyDialect;
		}
		if ("ingres".equalsIgnoreCase(databaseName)) {
			switch (majorVersion) {
			case 9:
				if (minorVersion > 2)
					return Ingres9Dialect;
				else
					return IngresDialect;
			case 10:
				return Ingres10Dialect;
			default:
			}
			return IngresDialect;
		}
		if (databaseName.startsWith("Microsoft SQL Server")) {
			switch (majorVersion) {
			case 8:
				return SQLServerDialect;
			case 9:
				return SQLServer2005Dialect;
			case 10:
				return SQLServer2008Dialect;
			case 11:
			case 12:
			case 13:
				return SQLServer2012Dialect;
			default:
				if (majorVersion < 8)
					return SQLServerDialect;
				else
					return SQLServer2012Dialect;
			}
		}
		if ("Sybase SQL Server".equals(databaseName) || "Adaptive Server Enterprise".equals(databaseName))
			return SybaseASE15Dialect;
		if (databaseName.startsWith("Adaptive Server Anywhere"))
			return SybaseAnywhereDialect;
		if ("Informix Dynamic Server".equals(databaseName))
			return InformixDialect;
		if ("DB2 UDB for AS/400".equals(databaseName))
			return DB2400Dialect;
		if (databaseName.startsWith("DB2/"))
			return DB2Dialect;
		if ("Oracle".equals(databaseName)) {
			switch (majorVersion) {
			case 12:
				return Oracle12cDialect;
			case 11:
			case 10:
				return Oracle10gDialect;
			case 9:
				return Oracle9iDialect;
			case 8:
				return Oracle8iDialect;
			default:
			}
			return Oracle8iDialect;
		}
		if ("HDB".equals(databaseName))
			return HANAColumnStoreDialect;
		if (databaseName.startsWith("Firebird"))
			return FirebirdDialect;
		if (StrUtils.containsIgnoreCase(databaseName, "sqlite"))
			return SQLiteDialect;
		return null;
	}

	/**
	 * Create a pagination SQL by given pageNumber, pageSize and SQL<br/>
	 * 
	 * @param pageNumber
	 *            started from 0
	 * @param pageSize
	 *            page size
	 * @param sql
	 *            the original sql
	 * @return the pagination SQL String
	 */

	public String paginate(int pageNumber, int pageSize, String sql) {
		switch (this) {
		case SQLServer2005Dialect:
		case SQLServer2008Dialect:
		case SQLServer2012Dialect:
			return processSQLServer(this, pageNumber, pageSize, sql);
		default:
		}

		if (!StrUtils.startsWithIgnoreCase(sql, "select "))
			return (String) DialectException.throwEX("SQL should be started with \"select \".");
		String body = sql.substring(7).trim();
		if (StrUtils.isEmpty(body))
			return (String) DialectException.throwEX("SQL body can not be null");

		int skipRows = (pageNumber - 1) * pageSize;
		int skipRowsPlus1 = skipRows + 1;
		int totalRows = pageNumber * pageSize;
		int totalRowsPlus1 = totalRows + 1;
		String useTemplate = this.sqlTemplate;

		// use simple limit ? template if offset is 0
		if (skipRows == 0)
			useTemplate = this.topLimitTemplate;

		if (Dialect.NOT_SUPPORT.equals(useTemplate)) {
			if (!Dialect.NOT_SUPPORT.equals(this.topLimitTemplate))
				return (String) DialectException
						.throwEX("Dialect \"" + this + "\" only support top limit SQL, for example: \""
								+ aTopLimitSqlExample(this.topLimitTemplate) + "\"");
			return (String) DialectException.throwEX("Dialect \"" + this + "\" does not support physical pagination");
		}

		if (useTemplate.contains(DISTINCT_TAG)) {
			// if distinct template use non-distinct sql, delete distinct tag
			if (!StrUtils.startsWithIgnoreCase(body, "distinct "))
				useTemplate = StrUtils.replace(useTemplate, DISTINCT_TAG, "");
			else {
				// if distinct template use distinct sql, use it
				useTemplate = StrUtils.replace(useTemplate, DISTINCT_TAG, "distinct");
				body = body.substring(9);
			}
		}

		// if have $XXX tag, replaced by real values
		String result = StrUtils.replaceIgnoreCase(useTemplate, SKIP_ROWS, String.valueOf(skipRows));
		result = StrUtils.replaceIgnoreCase(result, PAGESIZE, String.valueOf(pageSize));
		result = StrUtils.replaceIgnoreCase(result, TOTAL_ROWS, String.valueOf(totalRows));
		result = StrUtils.replaceIgnoreCase(result, SKIP_ROWS_PLUS1, String.valueOf(skipRowsPlus1));
		result = StrUtils.replaceIgnoreCase(result, TOTAL_ROWS_PLUS1, String.valueOf(totalRowsPlus1));

		// now insert the customer's real full SQL here
		result = StrUtils.replace(result, "$SQL", sql);

		// or only insert the body without "select "
		result = StrUtils.replace(result, "$BODY", body);
		return result;
	}

}
