/*
 * AllDialects, a tiny SQL dialect tool 
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
 * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
 */
package com.github.drinkjava2.alldialects;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.SQLException;
import java.util.Map;

/**
 * AllDialects is a small Java tool collect all database's dialects, usually used for build pagination SQL. <br/>
 * 
 * AllDialects is built for jSqlBox project, but it can be used any where which need support all dialects in SQL
 * 
 * Note: Do not modify source code manually, most of this file is generated by source code generator
 * 
 * @author Yong Zhu
 * @version 1.0.0
 * @since 1.0.0
 */
public enum Dialect {
	SQLiteDialect, Cache71Dialect, CUBRIDDialect, DataDirectOracle9Dialect, DB2Dialect, DB2390Dialect, DB2400Dialect, DerbyDialect, DerbyTenFiveDialect, DerbyTenSevenDialect, DerbyTenSixDialect, FirebirdDialect, FrontBaseDialect, H2Dialect, HANAColumnStoreDialect, HANARowStoreDialect, HSQLDialect, InformixDialect, Informix10Dialect, IngresDialect, Ingres10Dialect, Ingres9Dialect, InterbaseDialect, JDataStoreDialect, MariaDBDialect, MariaDB53Dialect, MckoiDialect, MimerSQLDialect, MySQLDialect, MySQL5Dialect, MySQL55Dialect, MySQL57Dialect, MySQL57InnoDBDialect, MySQL5InnoDBDialect, MySQLInnoDBDialect, MySQLMyISAMDialect, OracleDialect, Oracle10gDialect, Oracle12cDialect, Oracle8iDialect, Oracle9Dialect, Oracle9iDialect, PointbaseDialect, PostgresPlusDialect, PostgreSQLDialect, PostgreSQL81Dialect, PostgreSQL82Dialect, PostgreSQL9Dialect, PostgreSQL91Dialect, PostgreSQL92Dialect, PostgreSQL93Dialect, PostgreSQL94Dialect, PostgreSQL95Dialect, ProgressDialect, RDMSOS2200Dialect, SAPDBDialect, SQLServerDialect, SQLServer2005Dialect, SQLServer2008Dialect, SQLServer2012Dialect, SybaseDialect, Sybase11Dialect, SybaseAnywhereDialect, SybaseASE15Dialect, SybaseASE157Dialect, TeradataDialect, Teradata14Dialect, TimesTen;// NOSONAR
	private String paginSQLTemplate;
	private Map<String, String> typeMappings;

	private Dialect() {
		initializePaginSqlTemplate();
		initializeTypeMappings();
	}

	public static final String NOT_SUPPORTED = "NOT SUPPORT";

	public String getPaginSqlTemplate() {// NOSONAR
		return paginSQLTemplate;
	}

	// Initialize paginSQLTemplate

	private void initializeTypeMappings() {// NOSONAR
		switch (this.toString()) { // NOSONAR

		case "SQLiteDialect": {// NOSONAR
			typeMappings.put("$BIGINT", "bigint");// NOSONAR
			typeMappings.put("$BINARY", "blob");
			typeMappings.put("$BIT", "boolean");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "decimal");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float($p)");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "blob");
			typeMappings.put("$LONGVARCHAR", "longvarchar");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "datetime");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "blob");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "Cache71Dialect": {
			typeMappings.put("$BIGINT", "BigInt");
			typeMappings.put("$BINARY", "varbinary($1)");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "longvarbinary");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "longvarchar");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "decimal");
			typeMappings.put("$DOUBLE", "double");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "longvarbinary");
			typeMappings.put("$LONGVARCHAR", "longvarchar");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "longvarbinary");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "CUBRIDDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BIT", "bit(8)");
			typeMappings.put("$BLOB", "bit varying(65535)");
			typeMappings.put("$BOOLEAN", "bit(8)");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "string");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "decimal");
			typeMappings.put("$DOUBLE", "double");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "int");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "double");
			typeMappings.put("$SMALLINT", "short");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "short");
			typeMappings.put("$VARBINARY", "bit varying($l)<2000|bit varying($l)");
			typeMappings.put("$VARCHAR", "string<255|varchar($l)<2000|varchar($l)");
		}
			break;
		case "DataDirectOracle9Dialect": {
			typeMappings.put("$BIGINT", "number(19,0)");
			typeMappings.put("$BIT", "number(1,0)");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1 char)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "number($p,$s)");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "number(10,0)");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "number($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "number(5,0)");
			typeMappings.put("$TIME", "date");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "number(3,0)");
			typeMappings.put("$VARBINARY", "long raw<2000|raw($l)");
			typeMappings.put("$VARCHAR", "long<4000|varchar2($l char)");
		}
			break;
		case "DB2Dialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "varchar($l) for bit data<254|char($l) for bit data");
			typeMappings.put("$BIT", "smallint");
			typeMappings.put("$BLOB", "blob($l)");
			typeMappings.put("$BOOLEAN", "smallint");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "clob($l)");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "long varchar for bit data");
			typeMappings.put("$LONGVARCHAR", "long varchar");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "varchar($l) for bit data");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "DB2390Dialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "varchar($l) for bit data<254|char($l) for bit data");
			typeMappings.put("$BIT", "smallint");
			typeMappings.put("$BLOB", "blob($l)");
			typeMappings.put("$BOOLEAN", "smallint");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "clob($l)");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "long varchar for bit data");
			typeMappings.put("$LONGVARCHAR", "long varchar");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "varchar($l) for bit data");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "DB2400Dialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "varchar($l) for bit data<254|char($l) for bit data");
			typeMappings.put("$BIT", "smallint");
			typeMappings.put("$BLOB", "blob($l)");
			typeMappings.put("$BOOLEAN", "smallint");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "clob($l)");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "long varchar for bit data");
			typeMappings.put("$LONGVARCHAR", "long varchar");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "varchar($l) for bit data");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "DerbyDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "varchar($l) for bit data<254|char($l) for bit data");
			typeMappings.put("$BIT", "smallint");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "smallint");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "clob($l)");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "long varchar for bit data");
			typeMappings.put("$LONGVARCHAR", "long varchar");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "varchar($l) for bit data");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "DerbyTenFiveDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "varchar($l) for bit data<254|char($l) for bit data");
			typeMappings.put("$BIT", "smallint");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "smallint");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "clob($l)");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "long varchar for bit data");
			typeMappings.put("$LONGVARCHAR", "long varchar");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "varchar($l) for bit data");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "DerbyTenSevenDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "varchar($l) for bit data<254|char($l) for bit data");
			typeMappings.put("$BIT", "smallint");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "clob($l)");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "long varchar for bit data");
			typeMappings.put("$LONGVARCHAR", "long varchar");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "varchar($l) for bit data");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "DerbyTenSixDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "varchar($l) for bit data<254|char($l) for bit data");
			typeMappings.put("$BIT", "smallint");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "smallint");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "clob($l)");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "long varchar for bit data");
			typeMappings.put("$LONGVARCHAR", "long varchar");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "varchar($l) for bit data");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "FirebirdDialect": {
			typeMappings.put("$BIGINT", "numeric(18,0)");
			typeMappings.put("$BIT", "smallint");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "smallint");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "blob sub_type 1");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "blob");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "FrontBaseDialect": {
			typeMappings.put("$BIGINT", "longint");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "bit varying($l)");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "H2Dialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary");
			typeMappings.put("$BIT", "boolean");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char($l)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "decimal($p,$s)");
			typeMappings.put("$DOUBLE", "double");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "longvarbinary");
			typeMappings.put("$LONGVARCHAR", "varchar(2147483647)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "decimal($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "binary($l)");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "HANAColumnStoreDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "blob<5000|varbinary($l)");
			typeMappings.put("$BIT", "smallint");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "tinyint");
			typeMappings.put("$CHAR", "varchar(1)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "decimal($p, $s)");
			typeMappings.put("$DOUBLE", "double");
			typeMappings.put("$FLOAT", "float($p)");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "blob<5000|varbinary($l)");
			typeMappings.put("$LONGVARCHAR", "clob<5000|varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nclob<5000|nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "blob<5000|varbinary($l)");
			typeMappings.put("$VARCHAR", "clob<5000|varchar($l)");
		}
			break;
		case "HANARowStoreDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "blob<5000|varbinary($l)");
			typeMappings.put("$BIT", "smallint");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "tinyint");
			typeMappings.put("$CHAR", "varchar(1)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "decimal($p, $s)");
			typeMappings.put("$DOUBLE", "double");
			typeMappings.put("$FLOAT", "float($p)");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "blob<5000|varbinary($l)");
			typeMappings.put("$LONGVARCHAR", "clob<5000|varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nclob<5000|nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "blob<5000|varbinary($l)");
			typeMappings.put("$VARCHAR", "clob<5000|varchar($l)");
		}
			break;
		case "HSQLDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "longvarbinary");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char($l)");
			typeMappings.put("$CLOB", "longvarchar");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "decimal($p,$s)");
			typeMappings.put("$DOUBLE", "double");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "longvarbinary");
			typeMappings.put("$LONGVARCHAR", "longvarchar");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "clob");
			typeMappings.put("$NUMERIC", "numeric");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "varbinary($l)");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "InformixDialect": {
			typeMappings.put("$BIGINT", "int8");
			typeMappings.put("$BINARY", "byte");
			typeMappings.put("$BIT", "smallint");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char($l)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "decimal");
			typeMappings.put("$DOUBLE", "float");
			typeMappings.put("$FLOAT", "smallfloat");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "blob");
			typeMappings.put("$LONGVARCHAR", "clob");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "decimal");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "smallfloat");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "datetime hour to second");
			typeMappings.put("$TIMESTAMP", "datetime year to fraction(5)");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "byte");
			typeMappings.put("$VARCHAR", "varchar($l)<255|varchar($l)<32739|lvarchar($l)");
		}
			break;
		case "Informix10Dialect": {
			typeMappings.put("$BIGINT", "int8");
			typeMappings.put("$BINARY", "byte");
			typeMappings.put("$BIT", "smallint");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char($l)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "decimal");
			typeMappings.put("$DOUBLE", "float");
			typeMappings.put("$FLOAT", "smallfloat");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "blob");
			typeMappings.put("$LONGVARCHAR", "clob");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "decimal");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "smallfloat");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "datetime hour to second");
			typeMappings.put("$TIMESTAMP", "datetime year to fraction(5)");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "byte");
			typeMappings.put("$VARCHAR", "varchar($l)<255|varchar($l)<32739|lvarchar($l)");
		}
			break;
		case "IngresDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "long byte<32000|byte($l)");
			typeMappings.put("$BIT", "tinyint");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char($l)<32000|char($l)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "decimal($p, $s)");
			typeMappings.put("$DOUBLE", "float");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "long byte");
			typeMappings.put("$LONGVARCHAR", "long varchar");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "decimal($p, $s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time with time zone");
			typeMappings.put("$TIMESTAMP", "timestamp with time zone");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "long byte<32000|varbyte($l)");
			typeMappings.put("$VARCHAR", "long varchar<32000|varchar($l)");
		}
			break;
		case "Ingres10Dialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "long byte<32000|byte($l)");
			typeMappings.put("$BIT", "boolean");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char($l)<32000|char($l)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "ansidate");
			typeMappings.put("$DECIMAL", "decimal($p, $s)");
			typeMappings.put("$DOUBLE", "float");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "long byte");
			typeMappings.put("$LONGVARCHAR", "long varchar");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "decimal($p, $s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time with time zone");
			typeMappings.put("$TIMESTAMP", "timestamp(9) with time zone");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "long byte<32000|varbyte($l)");
			typeMappings.put("$VARCHAR", "long varchar<32000|varchar($l)");
		}
			break;
		case "Ingres9Dialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "long byte<32000|byte($l)");
			typeMappings.put("$BIT", "tinyint");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char($l)<32000|char($l)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "ansidate");
			typeMappings.put("$DECIMAL", "decimal($p, $s)");
			typeMappings.put("$DOUBLE", "float");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "long byte");
			typeMappings.put("$LONGVARCHAR", "long varchar");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "decimal($p, $s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time with time zone");
			typeMappings.put("$TIMESTAMP", "timestamp(9) with time zone");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "long byte<32000|varbyte($l)");
			typeMappings.put("$VARCHAR", "long varchar<32000|varchar($l)");
		}
			break;
		case "InterbaseDialect": {
			typeMappings.put("$BIGINT", "numeric(18,0)");
			typeMappings.put("$BIT", "smallint");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "smallint");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "blob sub_type 1");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "blob");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "JDataStoreDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BIT", "tinyint");
			typeMappings.put("$BLOB", "varbinary");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "varchar");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p, $s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "varbinary($l)");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "MariaDBDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "longblob");
			typeMappings.put("$BOOLEAN", "bit");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "longtext");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "longblob<16777215|mediumblob");
			typeMappings.put("$LONGVARCHAR", "longtext");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "longtext");
			typeMappings.put("$NUMERIC", "decimal($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "datetime");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "longblob<255|tinyblob<65535|blob<16777215|mediumblob");
			typeMappings.put("$VARCHAR", "longtext<65535|varchar($l)");
		}
			break;
		case "MariaDB53Dialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "longblob");
			typeMappings.put("$BOOLEAN", "bit");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "longtext");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "longblob<16777215|mediumblob");
			typeMappings.put("$LONGVARCHAR", "longtext");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "longtext");
			typeMappings.put("$NUMERIC", "decimal($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "datetime(6)");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "longblob<255|tinyblob<65535|blob<16777215|mediumblob");
			typeMappings.put("$VARCHAR", "longtext<65535|varchar($l)");
		}
			break;
		case "MckoiDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "varbinary");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "MimerSQLDialect": {
			typeMappings.put("$BIGINT", "BIGINT");
			typeMappings.put("$BINARY", "BLOB($1)<2000|BINARY");
			typeMappings.put("$BIT", "ODBC.BIT");
			typeMappings.put("$BLOB", "BLOB($l)");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "NCHAR(1)");
			typeMappings.put("$CLOB", "NCLOB($l)");
			typeMappings.put("$DATE", "DATE");
			typeMappings.put("$DOUBLE", "DOUBLE PRECISION");
			typeMappings.put("$FLOAT", "FLOAT");
			typeMappings.put("$INTEGER", "INTEGER");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "BLOB($1)");
			typeMappings.put("$LONGVARCHAR", "CLOB($1)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "NUMERIC(19, $l)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "SMALLINT");
			typeMappings.put("$TIME", "TIME");
			typeMappings.put("$TIMESTAMP", "TIMESTAMP");
			typeMappings.put("$TINYINT", "ODBC.TINYINT");
			typeMappings.put("$VARBINARY", "BLOB($1)<2000|BINARY VARYING($l)");
			typeMappings.put("$VARCHAR", "NCLOB($l)<2000|NATIONAL CHARACTER VARYING($l)");
		}
			break;
		case "MySQLDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "longblob");
			typeMappings.put("$BOOLEAN", "bit");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "longtext");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "longblob<16777215|mediumblob");
			typeMappings.put("$LONGVARCHAR", "longtext");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "longtext");
			typeMappings.put("$NUMERIC", "decimal($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "datetime");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "longblob<255|tinyblob<65535|blob<16777215|mediumblob");
			typeMappings.put("$VARCHAR", "longtext<255|varchar($l)");
		}
			break;
		case "MySQL5Dialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "longblob");
			typeMappings.put("$BOOLEAN", "bit");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "longtext");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "longblob<16777215|mediumblob");
			typeMappings.put("$LONGVARCHAR", "longtext");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "longtext");
			typeMappings.put("$NUMERIC", "decimal($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "datetime");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "longblob<255|tinyblob<65535|blob<16777215|mediumblob");
			typeMappings.put("$VARCHAR", "longtext<65535|varchar($l)");
		}
			break;
		case "MySQL55Dialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "longblob");
			typeMappings.put("$BOOLEAN", "bit");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "longtext");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "longblob<16777215|mediumblob");
			typeMappings.put("$LONGVARCHAR", "longtext");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "longtext");
			typeMappings.put("$NUMERIC", "decimal($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "datetime");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "longblob<255|tinyblob<65535|blob<16777215|mediumblob");
			typeMappings.put("$VARCHAR", "longtext<65535|varchar($l)");
		}
			break;
		case "MySQL57Dialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "longblob");
			typeMappings.put("$BOOLEAN", "bit");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "longtext");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$JAVA_OBJECT", "json");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "longblob<16777215|mediumblob");
			typeMappings.put("$LONGVARCHAR", "longtext");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "longtext");
			typeMappings.put("$NUMERIC", "decimal($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "datetime(6)");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "longblob<255|tinyblob<65535|blob<16777215|mediumblob");
			typeMappings.put("$VARCHAR", "longtext<65535|varchar($l)");
		}
			break;
		case "MySQL57InnoDBDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "longblob");
			typeMappings.put("$BOOLEAN", "bit");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "longtext");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$JAVA_OBJECT", "json");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "longblob<16777215|mediumblob");
			typeMappings.put("$LONGVARCHAR", "longtext");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "longtext");
			typeMappings.put("$NUMERIC", "decimal($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "datetime(6)");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "longblob<255|tinyblob<65535|blob<16777215|mediumblob");
			typeMappings.put("$VARCHAR", "longtext<65535|varchar($l)");
		}
			break;
		case "MySQL5InnoDBDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "longblob");
			typeMappings.put("$BOOLEAN", "bit");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "longtext");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "longblob<16777215|mediumblob");
			typeMappings.put("$LONGVARCHAR", "longtext");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "longtext");
			typeMappings.put("$NUMERIC", "decimal($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "datetime");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "longblob<255|tinyblob<65535|blob<16777215|mediumblob");
			typeMappings.put("$VARCHAR", "longtext<65535|varchar($l)");
		}
			break;
		case "MySQLInnoDBDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "longblob");
			typeMappings.put("$BOOLEAN", "bit");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "longtext");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "longblob<16777215|mediumblob");
			typeMappings.put("$LONGVARCHAR", "longtext");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "longtext");
			typeMappings.put("$NUMERIC", "decimal($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "datetime");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "longblob<255|tinyblob<65535|blob<16777215|mediumblob");
			typeMappings.put("$VARCHAR", "longtext<255|varchar($l)");
		}
			break;
		case "MySQLMyISAMDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "longblob");
			typeMappings.put("$BOOLEAN", "bit");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "longtext");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "longblob<16777215|mediumblob");
			typeMappings.put("$LONGVARCHAR", "longtext");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "longtext");
			typeMappings.put("$NUMERIC", "decimal($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "datetime");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "longblob<255|tinyblob<65535|blob<16777215|mediumblob");
			typeMappings.put("$VARCHAR", "longtext<255|varchar($l)");
		}
			break;
		case "OracleDialect": {
			typeMappings.put("$BIGINT", "number(19,0)");
			typeMappings.put("$BIT", "number(1,0)");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "number($p,$s)");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "number(10,0)");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "number($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "number(5,0)");
			typeMappings.put("$TIME", "date");
			typeMappings.put("$TIMESTAMP", "date");
			typeMappings.put("$TINYINT", "number(3,0)");
			typeMappings.put("$VARBINARY", "long raw<2000|raw($l)");
			typeMappings.put("$VARCHAR", "long<4000|varchar2($l)");
		}
			break;
		case "Oracle10gDialect": {
			typeMappings.put("$BIGINT", "number(19,0)");
			typeMappings.put("$BINARY", "long raw<2000|raw($l)");
			typeMappings.put("$BIT", "number(1,0)");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "number(1,0)");
			typeMappings.put("$CHAR", "char(1 char)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "number($p,$s)");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "number(10,0)");
			typeMappings.put("$LONGNVARCHAR", "nvarchar2($l)");
			typeMappings.put("$LONGVARBINARY", "long raw");
			typeMappings.put("$LONGVARCHAR", "long");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "number($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar2($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "number(5,0)");
			typeMappings.put("$TIME", "date");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "number(3,0)");
			typeMappings.put("$VARBINARY", "long raw<2000|raw($l)");
			typeMappings.put("$VARCHAR", "long<4000|varchar2($l char)");
		}
			break;
		case "Oracle12cDialect": {
			typeMappings.put("$BIGINT", "number(19,0)");
			typeMappings.put("$BINARY", "long raw<2000|raw($l)");
			typeMappings.put("$BIT", "number(1,0)");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "number(1,0)");
			typeMappings.put("$CHAR", "char(1 char)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "number($p,$s)");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "number(10,0)");
			typeMappings.put("$LONGNVARCHAR", "nvarchar2($l)");
			typeMappings.put("$LONGVARBINARY", "long raw");
			typeMappings.put("$LONGVARCHAR", "long");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "number($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar2($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "number(5,0)");
			typeMappings.put("$TIME", "date");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "number(3,0)");
			typeMappings.put("$VARBINARY", "long raw<2000|raw($l)");
			typeMappings.put("$VARCHAR", "long<4000|varchar2($l char)");
		}
			break;
		case "Oracle8iDialect": {
			typeMappings.put("$BIGINT", "number(19,0)");
			typeMappings.put("$BINARY", "long raw<2000|raw($l)");
			typeMappings.put("$BIT", "number(1,0)");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "number(1,0)");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "number($p,$s)");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "number(10,0)");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "long raw");
			typeMappings.put("$LONGVARCHAR", "long");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "number($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "number(5,0)");
			typeMappings.put("$TIME", "date");
			typeMappings.put("$TIMESTAMP", "date");
			typeMappings.put("$TINYINT", "number(3,0)");
			typeMappings.put("$VARBINARY", "long raw<2000|raw($l)");
			typeMappings.put("$VARCHAR", "long<4000|varchar2($l)");
		}
			break;
		case "Oracle9Dialect": {
			typeMappings.put("$BIGINT", "number(19,0)");
			typeMappings.put("$BIT", "number(1,0)");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1 char)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "number($p,$s)");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "number(10,0)");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "number($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "number(5,0)");
			typeMappings.put("$TIME", "date");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "number(3,0)");
			typeMappings.put("$VARBINARY", "long raw<2000|raw($l)");
			typeMappings.put("$VARCHAR", "long<4000|varchar2($l char)");
		}
			break;
		case "Oracle9iDialect": {
			typeMappings.put("$BIGINT", "number(19,0)");
			typeMappings.put("$BINARY", "long raw<2000|raw($l)");
			typeMappings.put("$BIT", "number(1,0)");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "number(1,0)");
			typeMappings.put("$CHAR", "char(1 char)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "number($p,$s)");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "number(10,0)");
			typeMappings.put("$LONGNVARCHAR", "nvarchar2($l)");
			typeMappings.put("$LONGVARBINARY", "long raw");
			typeMappings.put("$LONGVARCHAR", "long");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "number($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar2($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "number(5,0)");
			typeMappings.put("$TIME", "date");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "number(3,0)");
			typeMappings.put("$VARBINARY", "long raw<2000|raw($l)");
			typeMappings.put("$VARCHAR", "long<4000|varchar2($l char)");
		}
			break;
		case "PointbaseDialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BIT", "smallint");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "blob($l)");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "PostgresPlusDialect": {
			typeMappings.put("$BIGINT", "int8");
			typeMappings.put("$BINARY", "bytea");
			typeMappings.put("$BIT", "bool");
			typeMappings.put("$BLOB", "oid");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "float8");
			typeMappings.put("$FLOAT", "float4");
			typeMappings.put("$INTEGER", "int4");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bytea");
			typeMappings.put("$LONGVARCHAR", "text");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p, $s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$OTHER", "uuid");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "int2");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "int2");
			typeMappings.put("$VARBINARY", "bytea");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "PostgreSQLDialect": {
			typeMappings.put("$BIGINT", "int8");
			typeMappings.put("$BINARY", "bytea");
			typeMappings.put("$BIT", "bool");
			typeMappings.put("$BLOB", "oid");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "float8");
			typeMappings.put("$FLOAT", "float4");
			typeMappings.put("$INTEGER", "int4");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bytea");
			typeMappings.put("$LONGVARCHAR", "text");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p, $s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$OTHER", "uuid");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "int2");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "int2");
			typeMappings.put("$VARBINARY", "bytea");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "PostgreSQL81Dialect": {
			typeMappings.put("$BIGINT", "int8");
			typeMappings.put("$BINARY", "bytea");
			typeMappings.put("$BIT", "bool");
			typeMappings.put("$BLOB", "oid");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "float8");
			typeMappings.put("$FLOAT", "float4");
			typeMappings.put("$INTEGER", "int4");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bytea");
			typeMappings.put("$LONGVARCHAR", "text");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p, $s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$OTHER", "uuid");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "int2");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "int2");
			typeMappings.put("$VARBINARY", "bytea");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "PostgreSQL82Dialect": {
			typeMappings.put("$BIGINT", "int8");
			typeMappings.put("$BINARY", "bytea");
			typeMappings.put("$BIT", "bool");
			typeMappings.put("$BLOB", "oid");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "float8");
			typeMappings.put("$FLOAT", "float4");
			typeMappings.put("$INTEGER", "int4");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bytea");
			typeMappings.put("$LONGVARCHAR", "text");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p, $s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$OTHER", "uuid");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "int2");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "int2");
			typeMappings.put("$VARBINARY", "bytea");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "PostgreSQL9Dialect": {
			typeMappings.put("$BIGINT", "int8");
			typeMappings.put("$BINARY", "bytea");
			typeMappings.put("$BIT", "bool");
			typeMappings.put("$BLOB", "oid");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "float8");
			typeMappings.put("$FLOAT", "float4");
			typeMappings.put("$INTEGER", "int4");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bytea");
			typeMappings.put("$LONGVARCHAR", "text");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p, $s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$OTHER", "uuid");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "int2");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "int2");
			typeMappings.put("$VARBINARY", "bytea");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "PostgreSQL91Dialect": {
			typeMappings.put("$BIGINT", "int8");
			typeMappings.put("$BINARY", "bytea");
			typeMappings.put("$BIT", "bool");
			typeMappings.put("$BLOB", "oid");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "float8");
			typeMappings.put("$FLOAT", "float4");
			typeMappings.put("$INTEGER", "int4");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bytea");
			typeMappings.put("$LONGVARCHAR", "text");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p, $s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$OTHER", "uuid");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "int2");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "int2");
			typeMappings.put("$VARBINARY", "bytea");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "PostgreSQL92Dialect": {
			typeMappings.put("$BIGINT", "int8");
			typeMappings.put("$BINARY", "bytea");
			typeMappings.put("$BIT", "bool");
			typeMappings.put("$BLOB", "oid");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "float8");
			typeMappings.put("$FLOAT", "float4");
			typeMappings.put("$INTEGER", "int4");
			typeMappings.put("$JAVA_OBJECT", "json");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bytea");
			typeMappings.put("$LONGVARCHAR", "text");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p, $s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$OTHER", "uuid");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "int2");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "int2");
			typeMappings.put("$VARBINARY", "bytea");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "PostgreSQL93Dialect": {
			typeMappings.put("$BIGINT", "int8");
			typeMappings.put("$BINARY", "bytea");
			typeMappings.put("$BIT", "bool");
			typeMappings.put("$BLOB", "oid");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "float8");
			typeMappings.put("$FLOAT", "float4");
			typeMappings.put("$INTEGER", "int4");
			typeMappings.put("$JAVA_OBJECT", "json");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bytea");
			typeMappings.put("$LONGVARCHAR", "text");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p, $s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$OTHER", "uuid");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "int2");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "int2");
			typeMappings.put("$VARBINARY", "bytea");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "PostgreSQL94Dialect": {
			typeMappings.put("$BIGINT", "int8");
			typeMappings.put("$BINARY", "bytea");
			typeMappings.put("$BIT", "bool");
			typeMappings.put("$BLOB", "oid");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "float8");
			typeMappings.put("$FLOAT", "float4");
			typeMappings.put("$INTEGER", "int4");
			typeMappings.put("$JAVA_OBJECT", "json");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bytea");
			typeMappings.put("$LONGVARCHAR", "text");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p, $s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$OTHER", "uuid");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "int2");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "int2");
			typeMappings.put("$VARBINARY", "bytea");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "PostgreSQL95Dialect": {
			typeMappings.put("$BIGINT", "int8");
			typeMappings.put("$BINARY", "bytea");
			typeMappings.put("$BIT", "bool");
			typeMappings.put("$BLOB", "oid");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "float8");
			typeMappings.put("$FLOAT", "float4");
			typeMappings.put("$INTEGER", "int4");
			typeMappings.put("$JAVA_OBJECT", "json");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bytea");
			typeMappings.put("$LONGVARCHAR", "text");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p, $s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$OTHER", "uuid");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "int2");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "int2");
			typeMappings.put("$VARBINARY", "bytea");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "ProgressDialect": {
			typeMappings.put("$BIGINT", "numeric");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "blob");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "character(1)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "real");
			typeMappings.put("$INTEGER", "integer");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "tinyint");
			typeMappings.put("$VARBINARY", "varbinary($l)");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "RDMSOS2200Dialect": {
			typeMappings.put("$BIGINT", "NUMERIC(21,0)");
			typeMappings.put("$BIT", "SMALLINT");
			typeMappings.put("$BLOB", "BLOB($l)");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "CHARACTER(1)");
			typeMappings.put("$CLOB", "clob");
			typeMappings.put("$DATE", "DATE");
			typeMappings.put("$DECIMAL", "NUMERIC(21,$l)");
			typeMappings.put("$DOUBLE", "DOUBLE PRECISION");
			typeMappings.put("$FLOAT", "FLOAT");
			typeMappings.put("$INTEGER", "INTEGER");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "NUMERIC(21,$l)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "REAL");
			typeMappings.put("$SMALLINT", "SMALLINT");
			typeMappings.put("$TIME", "TIME");
			typeMappings.put("$TIMESTAMP", "TIMESTAMP");
			typeMappings.put("$TINYINT", "SMALLINT");
			typeMappings.put("$VARBINARY", "bit varying($l)");
			typeMappings.put("$VARCHAR", "CHARACTER($l)");
		}
			break;
		case "SAPDBDialect": {
			typeMappings.put("$BIGINT", "fixed(19,0)");
			typeMappings.put("$BIT", "boolean");
			typeMappings.put("$BLOB", "long byte");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "long varchar");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "int");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "fixed($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "timestamp");
			typeMappings.put("$TINYINT", "fixed(3,0)");
			typeMappings.put("$VARBINARY", "long byte");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "SQLServerDialect": {
			typeMappings.put("$BIGINT", "numeric(19,0)");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "tinyint");
			typeMappings.put("$BLOB", "image");
			typeMappings.put("$BOOLEAN", "bit");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "datetime");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "int");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "image");
			typeMappings.put("$LONGVARCHAR", "text");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "datetime");
			typeMappings.put("$TIMESTAMP", "datetime");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "image<8000|varbinary($l)");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "SQLServer2005Dialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "varbinary(MAX)");
			typeMappings.put("$BOOLEAN", "bit");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "varchar(MAX)");
			typeMappings.put("$DATE", "datetime");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "int");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "varbinary(MAX)");
			typeMappings.put("$LONGVARCHAR", "varchar(MAX)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nvarchar(MAX)");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "datetime");
			typeMappings.put("$TIMESTAMP", "datetime");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "varbinary(MAX)<8000|varbinary($l)");
			typeMappings.put("$VARCHAR", "varchar(MAX)<8000|varchar($l)");
		}
			break;
		case "SQLServer2008Dialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "varbinary(MAX)");
			typeMappings.put("$BOOLEAN", "bit");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "varchar(MAX)");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "int");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "varbinary(MAX)");
			typeMappings.put("$LONGVARCHAR", "varchar(MAX)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nvarchar(MAX)");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar(MAX)<4000|nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "datetime2");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "varbinary(MAX)<8000|varbinary($l)");
			typeMappings.put("$VARCHAR", "varchar(MAX)<8000|varchar($l)");
		}
			break;
		case "SQLServer2012Dialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "bit");
			typeMappings.put("$BLOB", "varbinary(MAX)");
			typeMappings.put("$BOOLEAN", "bit");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "varchar(MAX)");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "int");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "varbinary(MAX)");
			typeMappings.put("$LONGVARCHAR", "varchar(MAX)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nvarchar(MAX)");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar(MAX)<4000|nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "datetime2");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "varbinary(MAX)<8000|varbinary($l)");
			typeMappings.put("$VARCHAR", "varchar(MAX)<8000|varchar($l)");
		}
			break;
		case "SybaseDialect": {
			typeMappings.put("$BIGINT", "numeric(19,0)");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "tinyint");
			typeMappings.put("$BLOB", "image");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "datetime");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "int");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "datetime");
			typeMappings.put("$TIMESTAMP", "datetime");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "varbinary($l)");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "Sybase11Dialect": {
			typeMappings.put("$BIGINT", "numeric(19,0)");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "tinyint");
			typeMappings.put("$BLOB", "image");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "datetime");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "int");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "datetime");
			typeMappings.put("$TIMESTAMP", "datetime");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "varbinary($l)");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "SybaseAnywhereDialect": {
			typeMappings.put("$BIGINT", "numeric(19,0)");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "tinyint");
			typeMappings.put("$BLOB", "image");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "datetime");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "int");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "datetime");
			typeMappings.put("$TIMESTAMP", "datetime");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "varbinary($l)");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "SybaseASE15Dialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "tinyint");
			typeMappings.put("$BLOB", "image");
			typeMappings.put("$BOOLEAN", "tinyint");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "numeric($p,$s)");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "int");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "image");
			typeMappings.put("$LONGVARCHAR", "text");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "datetime");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "varbinary($l)");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "SybaseASE157Dialect": {
			typeMappings.put("$BIGINT", "bigint");
			typeMappings.put("$BINARY", "binary($l)");
			typeMappings.put("$BIT", "tinyint");
			typeMappings.put("$BLOB", "image");
			typeMappings.put("$BOOLEAN", "tinyint");
			typeMappings.put("$CHAR", "char(1)");
			typeMappings.put("$CLOB", "text");
			typeMappings.put("$DATE", "date");
			typeMappings.put("$DECIMAL", "numeric($p,$s)");
			typeMappings.put("$DOUBLE", "double precision");
			typeMappings.put("$FLOAT", "float");
			typeMappings.put("$INTEGER", "int");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "image");
			typeMappings.put("$LONGVARCHAR", "text");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "numeric($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "smallint");
			typeMappings.put("$TIME", "time");
			typeMappings.put("$TIMESTAMP", "datetime");
			typeMappings.put("$TINYINT", "smallint");
			typeMappings.put("$VARBINARY", "varbinary($l)");
			typeMappings.put("$VARCHAR", "varchar($l)");
		}
			break;
		case "TeradataDialect": {
			typeMappings.put("$BIGINT", "NUMERIC(18,0)");
			typeMappings.put("$BINARY", "BYTEINT");
			typeMappings.put("$BIT", "BYTEINT");
			typeMappings.put("$BLOB", "BLOB");
			typeMappings.put("$BOOLEAN", "BYTEINT");
			typeMappings.put("$CHAR", "CHAR(1)");
			typeMappings.put("$CLOB", "CLOB");
			typeMappings.put("$DATE", "DATE");
			typeMappings.put("$DECIMAL", "DECIMAL");
			typeMappings.put("$DOUBLE", "DOUBLE PRECISION");
			typeMappings.put("$FLOAT", "FLOAT");
			typeMappings.put("$INTEGER", "INTEGER");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "LONG VARCHAR");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "NUMERIC($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "SMALLINT");
			typeMappings.put("$TIME", "TIME");
			typeMappings.put("$TIMESTAMP", "TIMESTAMP");
			typeMappings.put("$TINYINT", "BYTEINT");
			typeMappings.put("$VARBINARY", "VARBYTE($l)");
			typeMappings.put("$VARCHAR", "VARCHAR($l)");
		}
			break;
		case "Teradata14Dialect": {
			typeMappings.put("$BIGINT", "BIGINT");
			typeMappings.put("$BINARY", "VARBYTE(100)");
			typeMappings.put("$BIT", "BYTEINT");
			typeMappings.put("$BLOB", "BLOB");
			typeMappings.put("$BOOLEAN", "BYTEINT");
			typeMappings.put("$CHAR", "CHAR(1)");
			typeMappings.put("$CLOB", "CLOB");
			typeMappings.put("$DATE", "DATE");
			typeMappings.put("$DECIMAL", "DECIMAL");
			typeMappings.put("$DOUBLE", "DOUBLE PRECISION");
			typeMappings.put("$FLOAT", "FLOAT");
			typeMappings.put("$INTEGER", "INTEGER");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "VARBYTE(32000)");
			typeMappings.put("$LONGVARCHAR", "VARCHAR(32000)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "NUMERIC($p,$s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "SMALLINT");
			typeMappings.put("$TIME", "TIME");
			typeMappings.put("$TIMESTAMP", "TIMESTAMP");
			typeMappings.put("$TINYINT", "BYTEINT");
			typeMappings.put("$VARBINARY", "VARBYTE($l)");
			typeMappings.put("$VARCHAR", "VARCHAR($l)");
		}
			break;
		case "TimesTenDialect": {
			typeMappings.put("$BIGINT", "BIGINT");
			typeMappings.put("$BIT", "TINYINT");
			typeMappings.put("$BLOB", "VARBINARY(4000000)");
			typeMappings.put("$BOOLEAN", "boolean");
			typeMappings.put("$CHAR", "CHAR(1)");
			typeMappings.put("$CLOB", "VARCHAR(4000000)");
			typeMappings.put("$DATE", "DATE");
			typeMappings.put("$DOUBLE", "DOUBLE");
			typeMappings.put("$FLOAT", "FLOAT");
			typeMappings.put("$INTEGER", "INTEGER");
			typeMappings.put("$LONGNVARCHAR", "nvarchar($l)");
			typeMappings.put("$LONGVARBINARY", "bit varying($l)");
			typeMappings.put("$LONGVARCHAR", "varchar($l)");
			typeMappings.put("$NCHAR", "nchar($l)");
			typeMappings.put("$NCLOB", "nclob");
			typeMappings.put("$NUMERIC", "DECIMAL($p, $s)");
			typeMappings.put("$NVARCHAR", "nvarchar($l)");
			typeMappings.put("$REAL", "real");
			typeMappings.put("$SMALLINT", "SMALLINT");
			typeMappings.put("$TIME", "TIME");
			typeMappings.put("$TIMESTAMP", "TIMESTAMP");
			typeMappings.put("$TINYINT", "TINYINT");
			typeMappings.put("$VARBINARY", "VARBINARY($l)");
			typeMappings.put("$VARCHAR", "VARCHAR($l)");
		}
			break;
		default:
		}
	}

	// Initialize paginSQLTemplate
	private void initializePaginSqlTemplate() {// NOSONAR
		switch (this.toString()) { // NOSONAR
		case "H2Dialect":
		case "HANAColumnStoreDialect":
		case "HANARowStoreDialect":
		case "PostgreSQL81Dialect":
		case "PostgreSQL82Dialect":
		case "PostgreSQL91Dialect":
		case "PostgreSQL92Dialect":
		case "PostgreSQL93Dialect":
		case "PostgreSQL94Dialect":
		case "PostgreSQL95Dialect":
		case "PostgreSQL9Dialect":
		case "PostgreSQLDialect":
		case "PostgresPlusDialect":
		case "SQLiteDialect":
			paginSQLTemplate = "$SQL limit $MAX offset $OFFSET";
			break;
		case "CUBRIDDialect":
		case "MariaDB53Dialect":
		case "MariaDBDialect":
		case "MySQL55Dialect":
		case "MySQL57Dialect":
		case "MySQL57InnoDBDialect":
		case "MySQL5Dialect":
		case "MySQL5InnoDBDialect":
		case "MySQLDialect":
		case "MySQLInnoDBDialect":
		case "MySQLMyISAMDialect":
			paginSQLTemplate = "$SQL limit $OFFSET, $MAX";
			break;
		case "Ingres10Dialect":
		case "Ingres9Dialect":
			paginSQLTemplate = "$SQL offset $OFFSET fetch first $MAX rows only";
			break;
		case "DerbyDialect":
		case "DerbyTenFiveDialect":
		case "DerbyTenSevenDialect":
		case "DerbyTenSixDialect":
		case "Oracle12cDialect":
		case "SQLServer2012Dialect":
			paginSQLTemplate = "$SQL offset $OFFSET rows fetch next $MAX rows only";
			break;
		case "InterbaseDialect":
			paginSQLTemplate = "$SQL rows $OFFSET to $END";
			break;
		case "Cache71Dialect":
		case "DB2390Dialect":
		case "FrontBaseDialect":
		case "InformixDialect":
		case "IngresDialect":
		case "JDataStoreDialect":
		case "MckoiDialect":
		case "MimerSQLDialect":
		case "PointbaseDialect":
		case "ProgressDialect":
		case "RDMSOS2200Dialect":
		case "SAPDBDialect":
		case "SQLServerDialect":
		case "Sybase11Dialect":
		case "SybaseASE157Dialect":
		case "SybaseASE15Dialect":
		case "SybaseAnywhereDialect":
		case "SybaseDialect":
		case "Teradata14Dialect":
		case "TeradataDialect":
		case "TimesTenDialect":
			paginSQLTemplate = "NOT SUPPORT";
			break;
		case "SQLServer2005Dialect":
		case "SQLServer2008Dialect":
			paginSQLTemplate = "WITH query AS (SELECT inner_query.*, ROW_NUMBER() OVER (ORDER BY CURRENT_TIMESTAMP) as _rownum_ FROM ( select TOP($MAX) $BODY ) inner_query ) SELECT $MSSQL_ORDERBY FROM query WHERE _rownum_ >= $OFFSET AND _rownum_ < $END";
			break;
		case "DB2400Dialect":
		case "DB2Dialect":
			paginSQLTemplate = "select * from ( select inner2_.*, rownumber() over(order by order of inner2_) as rownumber_ from ( $SQL fetch first $END rows only ) as inner2_ ) as inner1_ where rownumber_ > $OFFSET order by rownumber_";
			break;
		case "Oracle8iDialect":
		case "OracleDialect":
			paginSQLTemplate = "select * from ( select row_.*, rownum rownum_ from ( $SQL ) row_ ) where rownum_ <= $END and rownum_ > $OFFSET";
			break;
		case "DataDirectOracle9Dialect":
		case "Oracle10gDialect":
		case "Oracle9Dialect":
		case "Oracle9iDialect":
			paginSQLTemplate = "select * from ( select row_.*, rownum rownum_ from ( $SQL ) row_ where rownum <= $END) where rownum_ > $OFFSET";
			break;
		case "Informix10Dialect":
			paginSQLTemplate = "select SKIP $OFFSET FIRST $MAX $BODY";
			break;
		case "FirebirdDialect":
			paginSQLTemplate = "select first $OFFSET skip $MAX $BODY";
			break;
		case "HSQLDialect":
			paginSQLTemplate = "select limit $OFFSET $MAX $BODY";
			break;
		default:
			paginSQLTemplate = "";
		}
	}

	public Map<String, String> getTypeTemplate() {// N
		return null;
	}

	/**
	 * Create a pagination SQL by given pageNumber, pageSize and SQL
	 * 
	 * @param pageNumber
	 *            pageNumber started from 0
	 * @param pageSize
	 *            page size
	 * @param sql
	 *            the original sql
	 * @return the pagination SQL String
	 */
	public String pagin(int pageNumber, int pageSize, String sql) {
		if (!StringUtility.startsWithIgnoreCase(sql, "select "))
			return (String) DialectException.throwEX("SQL should be started with \"select \".");
		String body = sql.substring(7);
		String pagintemplate = this.getPaginSqlTemplate();
		if (Dialect.NOT_SUPPORTED.equals(pagintemplate))
			return (String) DialectException
					.throwEX("This dialect \"" + this + "\" does not support physical pagination.");

		// if have $SQL, replace by real sql
		String result = StringUtility.replace(pagintemplate, "$SQL", sql);
		// if have $BODY, replace by real body
		result = StringUtility.replace(result, "$BODY", body);
		result = StringUtility.replace(result, "$OFFSET", String.valueOf((pageNumber - 1) * pageSize));
		result = StringUtility.replace(result, "$MAX", String.valueOf(pageSize));
		result = StringUtility.replace(result, "$END", String.valueOf(pageNumber * pageSize));
		if (result.contains("$MSSQL_ORDERBY")) {

		}
		return result;
	}

	/**
	 * Guess Dialect by give databaseName, MajorVersion, majorVersion
	 * 
	 * @param databaseName
	 *            database name
	 * @param majorVersion
	 *            major version, Optional
	 * @param minorVersion
	 *            minor version, Optional
	 * @return dialect or null if not found
	 */
	public static Dialect guessDialect(Object... databaseName_majorVersion_minorVersion) {// NOSONAR
		String databaseName = "";
		int majorVersion = 0;
		int minorVersion = 0;
		for (int i = 0; i < databaseName_majorVersion_minorVersion.length; i++) {
			if (i == 0)
				databaseName = (String) databaseName_majorVersion_minorVersion[i];
			if (i == 1)
				majorVersion = (Integer) databaseName_majorVersion_minorVersion[i];
			if (i == 2)
				minorVersion = (Integer) databaseName_majorVersion_minorVersion[i];
		}
		if ("CUBRID".equalsIgnoreCase(databaseName))
			return CUBRIDDialect;
		if ("HSQL Database Engine".equals(databaseName))
			return HSQLDialect;
		if ("H2".equals(databaseName))
			return H2Dialect;
		if ("MySQL".equals(databaseName))
			if (majorVersion >= 5)
				return MySQL5Dialect;
			else
				return MySQLDialect;
		if ("PostgreSQL".equals(databaseName)) {
			if (majorVersion == 9) {
				if (minorVersion >= 4) {
					return PostgreSQL94Dialect;
				} else if (minorVersion >= 2) {
					return PostgreSQL92Dialect;
				}
				return PostgreSQL9Dialect;
			}
			if (majorVersion == 8 && minorVersion >= 2) {
				return PostgreSQL82Dialect;
			}
			return PostgreSQL81Dialect;
		}
		if ("EnterpriseDB".equals(databaseName))
			return PostgresPlusDialect;
		if ("Apache Derby".equals(databaseName)) {
			if (majorVersion > 10 || (majorVersion == 10 && minorVersion >= 7))
				return DerbyTenSevenDialect;
			else if (majorVersion == 10 && minorVersion == 6)
				return DerbyTenSixDialect;
			else if (majorVersion == 10 && minorVersion == 5)
				return DerbyTenFiveDialect;
			else
				return DerbyDialect;
		}
		if ("ingres".equalsIgnoreCase(databaseName)) {
			switch (majorVersion) {
			case 9:
				if (minorVersion > 2)
					return Ingres9Dialect;
				else
					return IngresDialect;
			case 10:
				return Ingres10Dialect;
			default:
			}
			return IngresDialect;
		}
		if (databaseName.startsWith("Microsoft SQL Server")) {
			switch (majorVersion) {
			case 8:
				return SQLServerDialect;
			case 9:
				return SQLServer2005Dialect;
			case 10:
				return SQLServer2008Dialect;
			case 11:
			case 12:
			case 13:
				return SQLServer2012Dialect;
			default:
				if (majorVersion < 8)
					return SQLServerDialect;
				else
					return SQLServer2012Dialect;
			}
		}
		if ("Sybase SQL Server".equals(databaseName) || "Adaptive Server Enterprise".equals(databaseName))
			return SybaseASE15Dialect;
		if (databaseName.startsWith("Adaptive Server Anywhere"))
			return SybaseAnywhereDialect;
		if ("Informix Dynamic Server".equals(databaseName))
			return InformixDialect;
		if ("DB2 UDB for AS/400".equals(databaseName))
			return DB2400Dialect;
		if (databaseName.startsWith("DB2/"))
			return DB2Dialect;
		if ("Oracle".equals(databaseName)) {
			switch (majorVersion) {
			case 12:
				return Oracle12cDialect;
			case 11:
			case 10:
				return Oracle10gDialect;
			case 9:
				return Oracle9iDialect;
			case 8:
				return Oracle8iDialect;
			default:
			}
			return Oracle8iDialect;
		}
		if ("HDB".equals(databaseName))
			return HANAColumnStoreDialect;
		if (databaseName.startsWith("Firebird"))
			return FirebirdDialect;
		if (databaseName.toLowerCase().indexOf("sqlite") >= 0)
			return SQLiteDialect;
		return null;
	}

	/**
	 * Guess dialect based on given JDBC connection instance, Note: this method does not close connection
	 * 
	 * @param jdbcConnection
	 * @return dialect or null if not found
	 */
	public static Dialect guessDialect(Connection jdbcConnection) {
		String databaseName;
		int majorVersion;
		int minorVersion;
		try {
			DatabaseMetaData meta = jdbcConnection.getMetaData();
			databaseName = meta.getDatabaseProductName();
			majorVersion = meta.getDatabaseMajorVersion();
			minorVersion = meta.getDatabaseMinorVersion();
		} catch (SQLException e) {
			return (Dialect) DialectException.throwEX(e, e.getMessage());
		}
		return Dialect.guessDialect(databaseName, majorVersion, minorVersion);
	}

	/**
	 * Create a pagination SQL by given dialect, pageNumber, pageSize and SQL
	 * 
	 * @param dialect
	 *            Dialect
	 * @param pageNumber
	 *            pageNumber started from 0
	 * @param pageSize
	 *            page size
	 * @param sql
	 *            the original sql
	 * @return the pagination SQL String
	 */
	public static String pagin(Dialect dialect, int pageNumber, int pageSize, String sql) {
		if (dialect == null)
			return (String) DialectException.throwEX("dialect can not be null, please set a dialect first.");
		return dialect.pagin(pageNumber, pageSize, sql);
	}

	public static void main(String[] args) {
		System.out.println(Dialect.PostgresPlusDialect.getPaginSqlTemplate());
		System.out.println(Dialect.MySQL55Dialect.getPaginSqlTemplate());
	}
}
